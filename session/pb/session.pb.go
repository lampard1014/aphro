// Code generated by protoc-gen-go. DO NOT EDIT.
// source: session.proto

/*
Package Aphro_Session_pb is a generated protocol buffer package.

It is generated from these files:
	session.proto

It has these top-level messages:
	MerchantSendCodeRequest
	MerchantSendCodeResponse
	MerchantVerifyCodeRequest
	MerchantVerifyCodeResponse
	IsSessionTokenVailateRequest
	IsSessionTokenVailateResponse
	SessionTokenQueryRequest
	SessionTokenQueryResponse
	SessionTokenCreateRequest
	SessionTokenCreateResponse
	DeleteSessionTokenRequest
	DeleteSessionTokenResponse
	RenewSessionTokenRequest
	RenewSessionTokenResponse
*/
package Aphro_Session_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MerchantSendCodeRequest struct {
	Cellphone string `protobuf:"bytes,1,opt,name=cellphone" json:"cellphone,omitempty"`
	Scence    uint32 `protobuf:"varint,2,opt,name=scence" json:"scence,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *MerchantSendCodeRequest) Reset()                    { *m = MerchantSendCodeRequest{} }
func (m *MerchantSendCodeRequest) String() string            { return proto.CompactTextString(m) }
func (*MerchantSendCodeRequest) ProtoMessage()               {}
func (*MerchantSendCodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MerchantSendCodeRequest) GetCellphone() string {
	if m != nil {
		return m.Cellphone
	}
	return ""
}

func (m *MerchantSendCodeRequest) GetScence() uint32 {
	if m != nil {
		return m.Scence
	}
	return 0
}

func (m *MerchantSendCodeRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type MerchantSendCodeResponse struct {
	Successed bool `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
}

func (m *MerchantSendCodeResponse) Reset()                    { *m = MerchantSendCodeResponse{} }
func (m *MerchantSendCodeResponse) String() string            { return proto.CompactTextString(m) }
func (*MerchantSendCodeResponse) ProtoMessage()               {}
func (*MerchantSendCodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MerchantSendCodeResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

type MerchantVerifyCodeRequest struct {
	Cellphone string `protobuf:"bytes,1,opt,name=cellphone" json:"cellphone,omitempty"`
	Scence    uint32 `protobuf:"varint,2,opt,name=scence" json:"scence,omitempty"`
	SmsCode   string `protobuf:"bytes,3,opt,name=smsCode" json:"smsCode,omitempty"`
}

func (m *MerchantVerifyCodeRequest) Reset()                    { *m = MerchantVerifyCodeRequest{} }
func (m *MerchantVerifyCodeRequest) String() string            { return proto.CompactTextString(m) }
func (*MerchantVerifyCodeRequest) ProtoMessage()               {}
func (*MerchantVerifyCodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MerchantVerifyCodeRequest) GetCellphone() string {
	if m != nil {
		return m.Cellphone
	}
	return ""
}

func (m *MerchantVerifyCodeRequest) GetScence() uint32 {
	if m != nil {
		return m.Scence
	}
	return 0
}

func (m *MerchantVerifyCodeRequest) GetSmsCode() string {
	if m != nil {
		return m.SmsCode
	}
	return ""
}

type MerchantVerifyCodeResponse struct {
	Successed bool `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
}

func (m *MerchantVerifyCodeResponse) Reset()                    { *m = MerchantVerifyCodeResponse{} }
func (m *MerchantVerifyCodeResponse) String() string            { return proto.CompactTextString(m) }
func (*MerchantVerifyCodeResponse) ProtoMessage()               {}
func (*MerchantVerifyCodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MerchantVerifyCodeResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

type IsSessionTokenVailateRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
}

func (m *IsSessionTokenVailateRequest) Reset()                    { *m = IsSessionTokenVailateRequest{} }
func (m *IsSessionTokenVailateRequest) String() string            { return proto.CompactTextString(m) }
func (*IsSessionTokenVailateRequest) ProtoMessage()               {}
func (*IsSessionTokenVailateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IsSessionTokenVailateRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

type IsSessionTokenVailateResponse struct {
	Successed bool `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
}

func (m *IsSessionTokenVailateResponse) Reset()                    { *m = IsSessionTokenVailateResponse{} }
func (m *IsSessionTokenVailateResponse) String() string            { return proto.CompactTextString(m) }
func (*IsSessionTokenVailateResponse) ProtoMessage()               {}
func (*IsSessionTokenVailateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IsSessionTokenVailateResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

type SessionTokenQueryRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
}

func (m *SessionTokenQueryRequest) Reset()                    { *m = SessionTokenQueryRequest{} }
func (m *SessionTokenQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*SessionTokenQueryRequest) ProtoMessage()               {}
func (*SessionTokenQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SessionTokenQueryRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

type SessionTokenQueryResponse struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	Ttl          int64  `protobuf:"varint,2,opt,name=ttl" json:"ttl,omitempty"`
	Successed    bool   `protobuf:"varint,3,opt,name=successed" json:"successed,omitempty"`
}

func (m *SessionTokenQueryResponse) Reset()                    { *m = SessionTokenQueryResponse{} }
func (m *SessionTokenQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*SessionTokenQueryResponse) ProtoMessage()               {}
func (*SessionTokenQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SessionTokenQueryResponse) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *SessionTokenQueryResponse) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *SessionTokenQueryResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

type SessionTokenCreateRequest struct {
	SessionTokenRequestStr string `protobuf:"bytes,1,opt,name=sessionTokenRequestStr" json:"sessionTokenRequestStr,omitempty"`
	Uid                    uint32 `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	MerchantID             uint32 `protobuf:"varint,3,opt,name=merchantID" json:"merchantID,omitempty"`
}

func (m *SessionTokenCreateRequest) Reset()                    { *m = SessionTokenCreateRequest{} }
func (m *SessionTokenCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*SessionTokenCreateRequest) ProtoMessage()               {}
func (*SessionTokenCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SessionTokenCreateRequest) GetSessionTokenRequestStr() string {
	if m != nil {
		return m.SessionTokenRequestStr
	}
	return ""
}

func (m *SessionTokenCreateRequest) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SessionTokenCreateRequest) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

type SessionTokenCreateResponse struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	Ttl          int64  `protobuf:"varint,2,opt,name=ttl" json:"ttl,omitempty"`
	Successed    bool   `protobuf:"varint,3,opt,name=successed" json:"successed,omitempty"`
}

func (m *SessionTokenCreateResponse) Reset()                    { *m = SessionTokenCreateResponse{} }
func (m *SessionTokenCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*SessionTokenCreateResponse) ProtoMessage()               {}
func (*SessionTokenCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SessionTokenCreateResponse) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *SessionTokenCreateResponse) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *SessionTokenCreateResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

type DeleteSessionTokenRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
}

func (m *DeleteSessionTokenRequest) Reset()                    { *m = DeleteSessionTokenRequest{} }
func (m *DeleteSessionTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSessionTokenRequest) ProtoMessage()               {}
func (*DeleteSessionTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteSessionTokenRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

type DeleteSessionTokenResponse struct {
	Successed bool `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
}

func (m *DeleteSessionTokenResponse) Reset()                    { *m = DeleteSessionTokenResponse{} }
func (m *DeleteSessionTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteSessionTokenResponse) ProtoMessage()               {}
func (*DeleteSessionTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeleteSessionTokenResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

type RenewSessionTokenRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
}

func (m *RenewSessionTokenRequest) Reset()                    { *m = RenewSessionTokenRequest{} }
func (m *RenewSessionTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*RenewSessionTokenRequest) ProtoMessage()               {}
func (*RenewSessionTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RenewSessionTokenRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

type RenewSessionTokenResponse struct {
	Ttl       int64 `protobuf:"varint,1,opt,name=ttl" json:"ttl,omitempty"`
	Successed bool  `protobuf:"varint,2,opt,name=successed" json:"successed,omitempty"`
}

func (m *RenewSessionTokenResponse) Reset()                    { *m = RenewSessionTokenResponse{} }
func (m *RenewSessionTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*RenewSessionTokenResponse) ProtoMessage()               {}
func (*RenewSessionTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RenewSessionTokenResponse) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *RenewSessionTokenResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

func init() {
	proto.RegisterType((*MerchantSendCodeRequest)(nil), "Aphro.Session.pb.MerchantSendCodeRequest")
	proto.RegisterType((*MerchantSendCodeResponse)(nil), "Aphro.Session.pb.MerchantSendCodeResponse")
	proto.RegisterType((*MerchantVerifyCodeRequest)(nil), "Aphro.Session.pb.MerchantVerifyCodeRequest")
	proto.RegisterType((*MerchantVerifyCodeResponse)(nil), "Aphro.Session.pb.MerchantVerifyCodeResponse")
	proto.RegisterType((*IsSessionTokenVailateRequest)(nil), "Aphro.Session.pb.IsSessionTokenVailateRequest")
	proto.RegisterType((*IsSessionTokenVailateResponse)(nil), "Aphro.Session.pb.IsSessionTokenVailateResponse")
	proto.RegisterType((*SessionTokenQueryRequest)(nil), "Aphro.Session.pb.SessionTokenQueryRequest")
	proto.RegisterType((*SessionTokenQueryResponse)(nil), "Aphro.Session.pb.SessionTokenQueryResponse")
	proto.RegisterType((*SessionTokenCreateRequest)(nil), "Aphro.Session.pb.SessionTokenCreateRequest")
	proto.RegisterType((*SessionTokenCreateResponse)(nil), "Aphro.Session.pb.SessionTokenCreateResponse")
	proto.RegisterType((*DeleteSessionTokenRequest)(nil), "Aphro.Session.pb.DeleteSessionTokenRequest")
	proto.RegisterType((*DeleteSessionTokenResponse)(nil), "Aphro.Session.pb.DeleteSessionTokenResponse")
	proto.RegisterType((*RenewSessionTokenRequest)(nil), "Aphro.Session.pb.RenewSessionTokenRequest")
	proto.RegisterType((*RenewSessionTokenResponse)(nil), "Aphro.Session.pb.RenewSessionTokenResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SessionService service

type SessionServiceClient interface {
	QuerySessionToken(ctx context.Context, in *SessionTokenQueryRequest, opts ...grpc.CallOption) (*SessionTokenQueryResponse, error)
	CreateSessionToken(ctx context.Context, in *SessionTokenCreateRequest, opts ...grpc.CallOption) (*SessionTokenCreateResponse, error)
	DeleteSessionToken(ctx context.Context, in *DeleteSessionTokenRequest, opts ...grpc.CallOption) (*DeleteSessionTokenResponse, error)
	RenewSessionToken(ctx context.Context, in *RenewSessionTokenRequest, opts ...grpc.CallOption) (*RenewSessionTokenResponse, error)
	// 检查SessionToken是否过期
	IsSessionTokenVailate(ctx context.Context, in *IsSessionTokenVailateRequest, opts ...grpc.CallOption) (*IsSessionTokenVailateResponse, error)
	// 短信验证码 验证接口
	MerchantVerifyCode(ctx context.Context, in *MerchantVerifyCodeRequest, opts ...grpc.CallOption) (*MerchantVerifyCodeResponse, error)
	// 短信验证码 发送接口
	MerchantSendCode(ctx context.Context, in *MerchantSendCodeRequest, opts ...grpc.CallOption) (*MerchantSendCodeResponse, error)
}

type sessionServiceClient struct {
	cc *grpc.ClientConn
}

func NewSessionServiceClient(cc *grpc.ClientConn) SessionServiceClient {
	return &sessionServiceClient{cc}
}

func (c *sessionServiceClient) QuerySessionToken(ctx context.Context, in *SessionTokenQueryRequest, opts ...grpc.CallOption) (*SessionTokenQueryResponse, error) {
	out := new(SessionTokenQueryResponse)
	err := grpc.Invoke(ctx, "/Aphro.Session.pb.SessionService/querySessionToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) CreateSessionToken(ctx context.Context, in *SessionTokenCreateRequest, opts ...grpc.CallOption) (*SessionTokenCreateResponse, error) {
	out := new(SessionTokenCreateResponse)
	err := grpc.Invoke(ctx, "/Aphro.Session.pb.SessionService/createSessionToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) DeleteSessionToken(ctx context.Context, in *DeleteSessionTokenRequest, opts ...grpc.CallOption) (*DeleteSessionTokenResponse, error) {
	out := new(DeleteSessionTokenResponse)
	err := grpc.Invoke(ctx, "/Aphro.Session.pb.SessionService/deleteSessionToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) RenewSessionToken(ctx context.Context, in *RenewSessionTokenRequest, opts ...grpc.CallOption) (*RenewSessionTokenResponse, error) {
	out := new(RenewSessionTokenResponse)
	err := grpc.Invoke(ctx, "/Aphro.Session.pb.SessionService/renewSessionToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) IsSessionTokenVailate(ctx context.Context, in *IsSessionTokenVailateRequest, opts ...grpc.CallOption) (*IsSessionTokenVailateResponse, error) {
	out := new(IsSessionTokenVailateResponse)
	err := grpc.Invoke(ctx, "/Aphro.Session.pb.SessionService/isSessionTokenVailate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) MerchantVerifyCode(ctx context.Context, in *MerchantVerifyCodeRequest, opts ...grpc.CallOption) (*MerchantVerifyCodeResponse, error) {
	out := new(MerchantVerifyCodeResponse)
	err := grpc.Invoke(ctx, "/Aphro.Session.pb.SessionService/merchantVerifyCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) MerchantSendCode(ctx context.Context, in *MerchantSendCodeRequest, opts ...grpc.CallOption) (*MerchantSendCodeResponse, error) {
	out := new(MerchantSendCodeResponse)
	err := grpc.Invoke(ctx, "/Aphro.Session.pb.SessionService/merchantSendCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SessionService service

type SessionServiceServer interface {
	QuerySessionToken(context.Context, *SessionTokenQueryRequest) (*SessionTokenQueryResponse, error)
	CreateSessionToken(context.Context, *SessionTokenCreateRequest) (*SessionTokenCreateResponse, error)
	DeleteSessionToken(context.Context, *DeleteSessionTokenRequest) (*DeleteSessionTokenResponse, error)
	RenewSessionToken(context.Context, *RenewSessionTokenRequest) (*RenewSessionTokenResponse, error)
	// 检查SessionToken是否过期
	IsSessionTokenVailate(context.Context, *IsSessionTokenVailateRequest) (*IsSessionTokenVailateResponse, error)
	// 短信验证码 验证接口
	MerchantVerifyCode(context.Context, *MerchantVerifyCodeRequest) (*MerchantVerifyCodeResponse, error)
	// 短信验证码 发送接口
	MerchantSendCode(context.Context, *MerchantSendCodeRequest) (*MerchantSendCodeResponse, error)
}

func RegisterSessionServiceServer(s *grpc.Server, srv SessionServiceServer) {
	s.RegisterService(&_SessionService_serviceDesc, srv)
}

func _SessionService_QuerySessionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionTokenQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).QuerySessionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Session.pb.SessionService/QuerySessionToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).QuerySessionToken(ctx, req.(*SessionTokenQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_CreateSessionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionTokenCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).CreateSessionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Session.pb.SessionService/CreateSessionToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).CreateSessionToken(ctx, req.(*SessionTokenCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_DeleteSessionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).DeleteSessionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Session.pb.SessionService/DeleteSessionToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).DeleteSessionToken(ctx, req.(*DeleteSessionTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_RenewSessionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewSessionTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).RenewSessionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Session.pb.SessionService/RenewSessionToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).RenewSessionToken(ctx, req.(*RenewSessionTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_IsSessionTokenVailate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSessionTokenVailateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).IsSessionTokenVailate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Session.pb.SessionService/IsSessionTokenVailate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).IsSessionTokenVailate(ctx, req.(*IsSessionTokenVailateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_MerchantVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantVerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).MerchantVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Session.pb.SessionService/MerchantVerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).MerchantVerifyCode(ctx, req.(*MerchantVerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_MerchantSendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantSendCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).MerchantSendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Session.pb.SessionService/MerchantSendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).MerchantSendCode(ctx, req.(*MerchantSendCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Aphro.Session.pb.SessionService",
	HandlerType: (*SessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "querySessionToken",
			Handler:    _SessionService_QuerySessionToken_Handler,
		},
		{
			MethodName: "createSessionToken",
			Handler:    _SessionService_CreateSessionToken_Handler,
		},
		{
			MethodName: "deleteSessionToken",
			Handler:    _SessionService_DeleteSessionToken_Handler,
		},
		{
			MethodName: "renewSessionToken",
			Handler:    _SessionService_RenewSessionToken_Handler,
		},
		{
			MethodName: "isSessionTokenVailate",
			Handler:    _SessionService_IsSessionTokenVailate_Handler,
		},
		{
			MethodName: "merchantVerifyCode",
			Handler:    _SessionService_MerchantVerifyCode_Handler,
		},
		{
			MethodName: "merchantSendCode",
			Handler:    _SessionService_MerchantSendCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}

func init() { proto.RegisterFile("session.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 622 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0xdf, 0x6a, 0x13, 0x4f,
	0x14, 0xc7, 0x99, 0x86, 0x5f, 0x7f, 0xed, 0xc1, 0x4a, 0x1c, 0xfa, 0x67, 0xb3, 0xa4, 0x1a, 0x06,
	0x2f, 0xda, 0x28, 0x59, 0x50, 0x10, 0x09, 0xa8, 0x68, 0x7b, 0x53, 0xc4, 0x0b, 0x37, 0xd2, 0xfb,
	0xed, 0xe6, 0xd8, 0x2c, 0xdd, 0xec, 0x6c, 0x77, 0x26, 0x95, 0xde, 0x0a, 0x82, 0x37, 0x82, 0xe2,
	0x1b, 0x78, 0xe7, 0xf3, 0xf8, 0x0a, 0x3e, 0x88, 0xcc, 0x64, 0xd2, 0x6c, 0x36, 0x33, 0xba, 0x2a,
	0xde, 0xed, 0x9e, 0x3d, 0x73, 0xbe, 0x9f, 0x39, 0xe7, 0xcb, 0xcc, 0xc2, 0x86, 0x40, 0x21, 0x12,
	0x9e, 0xf5, 0xf2, 0x82, 0x4b, 0x4e, 0x9b, 0x4f, 0xf3, 0x51, 0xc1, 0x7b, 0x83, 0x59, 0xf0, 0xc4,
	0x6f, 0x9f, 0x72, 0x7e, 0x9a, 0x62, 0x10, 0xe5, 0x49, 0x10, 0x65, 0x19, 0x97, 0x91, 0x4c, 0x78,
	0x26, 0xa6, 0xf9, 0x0c, 0x61, 0xe7, 0x05, 0x16, 0xf1, 0x28, 0xca, 0xe4, 0x00, 0xb3, 0xe1, 0x01,
	0x1f, 0x62, 0x88, 0xe7, 0x13, 0x14, 0x92, 0xb6, 0x61, 0x3d, 0xc6, 0x34, 0xcd, 0x47, 0x3c, 0x43,
	0x8f, 0x74, 0xc8, 0xde, 0x7a, 0x38, 0x0f, 0xd0, 0x6d, 0x58, 0x15, 0x31, 0x66, 0x31, 0x7a, 0x2b,
	0x1d, 0xb2, 0xb7, 0x11, 0x9a, 0x37, 0xba, 0x09, 0xff, 0x49, 0x7e, 0x86, 0x99, 0xd7, 0xd0, 0x2b,
	0xa6, 0x2f, 0xec, 0x21, 0x78, 0xcb, 0x32, 0x22, 0xe7, 0x99, 0x40, 0xa5, 0x23, 0x26, 0x71, 0x8c,
	0x42, 0xe0, 0x50, 0xeb, 0xac, 0x85, 0xf3, 0x00, 0x3b, 0x83, 0xd6, 0x6c, 0xe5, 0x31, 0x16, 0xc9,
	0xeb, 0xcb, 0xbf, 0x47, 0xf4, 0xe0, 0x7f, 0x31, 0x16, 0xaa, 0x8e, 0x81, 0x9c, 0xbd, 0xb2, 0x3e,
	0xf8, 0x36, 0xb1, 0x5a, 0xa0, 0xcf, 0xa0, 0x7d, 0x24, 0x4c, 0xdf, 0x5f, 0xa9, 0x4d, 0x1f, 0x47,
	0x49, 0x1a, 0xc9, 0x2b, 0x56, 0x06, 0xd7, 0x44, 0xe9, 0xab, 0xc1, 0x5d, 0x88, 0xb1, 0x47, 0xb0,
	0xeb, 0xa8, 0x51, 0x0b, 0xe1, 0x31, 0x78, 0xe5, 0xc5, 0x2f, 0x27, 0x58, 0x5c, 0xfe, 0x8e, 0x3c,
	0x87, 0x96, 0x65, 0xbd, 0x91, 0xae, 0x51, 0x80, 0x36, 0xa1, 0x21, 0x65, 0xaa, 0xdb, 0xdd, 0x08,
	0xd5, 0xe3, 0x22, 0x70, 0xa3, 0x0a, 0xfc, 0x8e, 0x2c, 0x2a, 0x1e, 0x14, 0x58, 0xea, 0xd8, 0x03,
	0xd8, 0x2e, 0x57, 0x37, 0xe1, 0x81, 0x2c, 0x8c, 0xb6, 0xe3, 0xab, 0xa2, 0x98, 0x24, 0x43, 0x33,
	0x74, 0xf5, 0x48, 0x6f, 0x02, 0x8c, 0xcd, 0x5c, 0x8f, 0x0e, 0x35, 0xc6, 0x46, 0x58, 0x8a, 0xb0,
	0x1c, 0x7c, 0x1b, 0xc6, 0x3f, 0xdc, 0xf9, 0x13, 0x68, 0x1d, 0x62, 0x8a, 0x12, 0x07, 0xcb, 0x7b,
	0xa8, 0x35, 0xab, 0x3e, 0xf8, 0xb6, 0x02, 0x75, 0x7d, 0x12, 0x62, 0x86, 0x6f, 0xfe, 0x54, 0xfb,
	0x39, 0xb4, 0x2c, 0xeb, 0x8d, 0xb4, 0xe9, 0x04, 0x71, 0x74, 0x62, 0xa5, 0x02, 0x73, 0xef, 0xcb,
	0x1a, 0x5c, 0x37, 0x85, 0x06, 0x58, 0x5c, 0x24, 0x31, 0xd2, 0x0f, 0x04, 0x6e, 0x9c, 0x2b, 0xf3,
	0x95, 0x05, 0x68, 0xb7, 0x57, 0x3d, 0xdb, 0x7a, 0x2e, 0xb7, 0xfb, 0x77, 0x6a, 0xe5, 0x4e, 0x89,
	0xd9, 0xad, 0xb7, 0xdf, 0xbe, 0x7f, 0x5e, 0x69, 0xb1, 0xcd, 0xc0, 0xec, 0x32, 0xd0, 0x87, 0x56,
	0xa0, 0x11, 0xfa, 0xa4, 0x4b, 0x3f, 0x11, 0xa0, 0xb1, 0xf6, 0xc4, 0x02, 0xd0, 0x2f, 0x44, 0x16,
	0xcc, 0xec, 0xdf, 0xad, 0x97, 0x6c, 0x90, 0x3a, 0x1a, 0xc9, 0x67, 0x5b, 0x15, 0xa4, 0x29, 0xc5,
	0x8c, 0x69, 0xb8, 0x64, 0x00, 0x1b, 0x93, 0xd3, 0x67, 0x36, 0x26, 0xb7, 0xa7, 0x9c, 0x4c, 0x53,
	0x0a, 0xc5, 0xa4, 0xe6, 0x56, 0x54, 0x8d, 0x61, 0x9b, 0x9b, 0xcb, 0x7d, 0xb6, 0xb9, 0x39, 0x9d,
	0xe6, 0x9c, 0x9b, 0x46, 0x50, 0x3c, 0x5f, 0x09, 0x6c, 0x25, 0xb6, 0xf3, 0x94, 0xf6, 0x96, 0x75,
	0x7e, 0x76, 0x78, 0xfb, 0x41, 0xed, 0x7c, 0xc3, 0x16, 0x68, 0xb6, 0x7d, 0x76, 0xbb, 0xc2, 0x66,
	0xc5, 0x51, 0xac, 0x1f, 0x09, 0xd0, 0xf1, 0xd2, 0xdd, 0x63, 0x9b, 0xa7, 0xf3, 0x3a, 0xb4, 0xcd,
	0xd3, 0x7d, 0x9d, 0x95, 0xda, 0x37, 0xd3, 0x0d, 0x2e, 0xae, 0xb2, 0x14, 0xd2, 0x7b, 0x02, 0xcd,
	0x71, 0xe5, 0xd6, 0xa6, 0xfb, 0x6e, 0x8d, 0xca, 0x0f, 0x84, 0xdf, 0xad, 0x93, 0x6a, 0x60, 0x76,
	0x35, 0xcc, 0x0e, 0xa3, 0x73, 0x18, 0x61, 0x72, 0xfa, 0xa4, 0x7b, 0xb2, 0xaa, 0xff, 0x56, 0xee,
	0xff, 0x08, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x21, 0xc5, 0x18, 0xee, 0x08, 0x00, 0x00,
}
