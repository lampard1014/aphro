// Code generated by protoc-gen-go. DO NOT EDIT.
// source: commodity.proto

/*
Package Aphro_Commodity_pb is a generated protocol buffer package.

It is generated from these files:
	commodity.proto

It has these top-level messages:
	InnerComodityInfo
	CommodityCreateRequest
	CommodityCreateResponse
	CommodityDeleteRequest
	CommodityDeleteResponse
	CommodityUpdateRequest
	CommodityUpdateResponse
	CommodityQueryRequest
	CommodityQueryResponse
*/
package Aphro_Commodity_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import Aphro_CommonBiz "github.com/lampard1014/aphro/CommonBiz/Response/PB"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InnerComodityInfo struct {
	Name       string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Price      float32 `protobuf:"fixed32,2,opt,name=price" json:"price,omitempty"`
	MerchantID uint32  `protobuf:"varint,3,opt,name=merchantID" json:"merchantID,omitempty"`
	Id         uint32  `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
}

func (m *InnerComodityInfo) Reset()                    { *m = InnerComodityInfo{} }
func (m *InnerComodityInfo) String() string            { return proto.CompactTextString(m) }
func (*InnerComodityInfo) ProtoMessage()               {}
func (*InnerComodityInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InnerComodityInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InnerComodityInfo) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *InnerComodityInfo) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *InnerComodityInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CommodityCreateRequest struct {
	SessionToken string             `protobuf:"bytes,7,opt,name=sessionToken" json:"sessionToken,omitempty"`
	Good         *InnerComodityInfo `protobuf:"bytes,1,opt,name=good" json:"good,omitempty"`
}

func (m *CommodityCreateRequest) Reset()                    { *m = CommodityCreateRequest{} }
func (m *CommodityCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CommodityCreateRequest) ProtoMessage()               {}
func (*CommodityCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CommodityCreateRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *CommodityCreateRequest) GetGood() *InnerComodityInfo {
	if m != nil {
		return m.Good
	}
	return nil
}

type CommodityCreateResponse struct {
	Successed bool `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
}

func (m *CommodityCreateResponse) Reset()                    { *m = CommodityCreateResponse{} }
func (m *CommodityCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CommodityCreateResponse) ProtoMessage()               {}
func (*CommodityCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CommodityCreateResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

type CommodityDeleteRequest struct {
	SessionToken string `protobuf:"bytes,7,opt,name=sessionToken" json:"sessionToken,omitempty"`
	MerchantID   uint32 `protobuf:"varint,3,opt,name=merchantID" json:"merchantID,omitempty"`
	Id           uint32 `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
}

func (m *CommodityDeleteRequest) Reset()                    { *m = CommodityDeleteRequest{} }
func (m *CommodityDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*CommodityDeleteRequest) ProtoMessage()               {}
func (*CommodityDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CommodityDeleteRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *CommodityDeleteRequest) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *CommodityDeleteRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CommodityDeleteResponse struct {
	Successed bool `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
}

func (m *CommodityDeleteResponse) Reset()                    { *m = CommodityDeleteResponse{} }
func (m *CommodityDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*CommodityDeleteResponse) ProtoMessage()               {}
func (*CommodityDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CommodityDeleteResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

type CommodityUpdateRequest struct {
	SessionToken string  `protobuf:"bytes,7,opt,name=sessionToken" json:"sessionToken,omitempty"`
	Id           uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	MerchantID   uint32  `protobuf:"varint,3,opt,name=merchantID" json:"merchantID,omitempty"`
	Name         string  `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Price        float32 `protobuf:"fixed32,2,opt,name=price" json:"price,omitempty"`
}

func (m *CommodityUpdateRequest) Reset()                    { *m = CommodityUpdateRequest{} }
func (m *CommodityUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*CommodityUpdateRequest) ProtoMessage()               {}
func (*CommodityUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CommodityUpdateRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *CommodityUpdateRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CommodityUpdateRequest) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *CommodityUpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CommodityUpdateRequest) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

type CommodityUpdateResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *CommodityUpdateResponse) Reset()                    { *m = CommodityUpdateResponse{} }
func (m *CommodityUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*CommodityUpdateResponse) ProtoMessage()               {}
func (*CommodityUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CommodityUpdateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type CommodityQueryRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	MerchantID   uint32 `protobuf:"varint,2,opt,name=merchantID" json:"merchantID,omitempty"`
	Id           uint32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (m *CommodityQueryRequest) Reset()                    { *m = CommodityQueryRequest{} }
func (m *CommodityQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*CommodityQueryRequest) ProtoMessage()               {}
func (*CommodityQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CommodityQueryRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *CommodityQueryRequest) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *CommodityQueryRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CommodityQueryResponse struct {
	Success bool                 `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Goods   []*InnerComodityInfo `protobuf:"bytes,1,rep,name=goods" json:"goods,omitempty"`
}

func (m *CommodityQueryResponse) Reset()                    { *m = CommodityQueryResponse{} }
func (m *CommodityQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*CommodityQueryResponse) ProtoMessage()               {}
func (*CommodityQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CommodityQueryResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CommodityQueryResponse) GetGoods() []*InnerComodityInfo {
	if m != nil {
		return m.Goods
	}
	return nil
}

func init() {
	proto.RegisterType((*InnerComodityInfo)(nil), "Aphro.Commodity.pb.InnerComodityInfo")
	proto.RegisterType((*CommodityCreateRequest)(nil), "Aphro.Commodity.pb.CommodityCreateRequest")
	proto.RegisterType((*CommodityCreateResponse)(nil), "Aphro.Commodity.pb.CommodityCreateResponse")
	proto.RegisterType((*CommodityDeleteRequest)(nil), "Aphro.Commodity.pb.CommodityDeleteRequest")
	proto.RegisterType((*CommodityDeleteResponse)(nil), "Aphro.Commodity.pb.CommodityDeleteResponse")
	proto.RegisterType((*CommodityUpdateRequest)(nil), "Aphro.Commodity.pb.CommodityUpdateRequest")
	proto.RegisterType((*CommodityUpdateResponse)(nil), "Aphro.Commodity.pb.CommodityUpdateResponse")
	proto.RegisterType((*CommodityQueryRequest)(nil), "Aphro.Commodity.pb.CommodityQueryRequest")
	proto.RegisterType((*CommodityQueryResponse)(nil), "Aphro.Commodity.pb.CommodityQueryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CommodityService service

type CommodityServiceClient interface {
	// 增加商品
	CommodityCreate(ctx context.Context, in *CommodityCreateRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 删除商品
	CommodityDelete(ctx context.Context, in *CommodityDeleteRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 更新商品
	CommodityUpdate(ctx context.Context, in *CommodityUpdateRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 查看商品
	CommodityQuery(ctx context.Context, in *CommodityQueryRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
}

type commodityServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommodityServiceClient(cc *grpc.ClientConn) CommodityServiceClient {
	return &commodityServiceClient{cc}
}

func (c *commodityServiceClient) CommodityCreate(ctx context.Context, in *CommodityCreateRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Commodity.pb.CommodityService/commodityCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityServiceClient) CommodityDelete(ctx context.Context, in *CommodityDeleteRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Commodity.pb.CommodityService/commodityDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityServiceClient) CommodityUpdate(ctx context.Context, in *CommodityUpdateRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Commodity.pb.CommodityService/commodityUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityServiceClient) CommodityQuery(ctx context.Context, in *CommodityQueryRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Commodity.pb.CommodityService/commodityQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommodityService service

type CommodityServiceServer interface {
	// 增加商品
	CommodityCreate(context.Context, *CommodityCreateRequest) (*Aphro_CommonBiz.Response, error)
	// 删除商品
	CommodityDelete(context.Context, *CommodityDeleteRequest) (*Aphro_CommonBiz.Response, error)
	// 更新商品
	CommodityUpdate(context.Context, *CommodityUpdateRequest) (*Aphro_CommonBiz.Response, error)
	// 查看商品
	CommodityQuery(context.Context, *CommodityQueryRequest) (*Aphro_CommonBiz.Response, error)
}

func RegisterCommodityServiceServer(s *grpc.Server, srv CommodityServiceServer) {
	s.RegisterService(&_CommodityService_serviceDesc, srv)
}

func _CommodityService_CommodityCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommodityCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServiceServer).CommodityCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Commodity.pb.CommodityService/CommodityCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServiceServer).CommodityCreate(ctx, req.(*CommodityCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommodityService_CommodityDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommodityDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServiceServer).CommodityDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Commodity.pb.CommodityService/CommodityDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServiceServer).CommodityDelete(ctx, req.(*CommodityDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommodityService_CommodityUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommodityUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServiceServer).CommodityUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Commodity.pb.CommodityService/CommodityUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServiceServer).CommodityUpdate(ctx, req.(*CommodityUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommodityService_CommodityQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommodityQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServiceServer).CommodityQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Commodity.pb.CommodityService/CommodityQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServiceServer).CommodityQuery(ctx, req.(*CommodityQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommodityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Aphro.Commodity.pb.CommodityService",
	HandlerType: (*CommodityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "commodityCreate",
			Handler:    _CommodityService_CommodityCreate_Handler,
		},
		{
			MethodName: "commodityDelete",
			Handler:    _CommodityService_CommodityDelete_Handler,
		},
		{
			MethodName: "commodityUpdate",
			Handler:    _CommodityService_CommodityUpdate_Handler,
		},
		{
			MethodName: "commodityQuery",
			Handler:    _CommodityService_CommodityQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commodity.proto",
}

func init() { proto.RegisterFile("commodity.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x18, 0xc5, 0x95, 0x34, 0x63, 0xcc, 0xc0, 0x00, 0x8b, 0x3f, 0x59, 0x35, 0x8d, 0xca, 0x62, 0x52,
	0xe9, 0x45, 0xcc, 0x36, 0x24, 0xc4, 0xb8, 0xda, 0xba, 0x9b, 0xde, 0x41, 0x80, 0x07, 0x48, 0x93,
	0x8f, 0x36, 0x5a, 0x63, 0x67, 0x76, 0x02, 0x1a, 0x42, 0x42, 0xe2, 0x15, 0x26, 0xf1, 0x62, 0xbc,
	0x02, 0x0f, 0x82, 0x62, 0x27, 0x99, 0xb3, 0x76, 0xcb, 0xda, 0xbb, 0xe4, 0x53, 0x7c, 0xce, 0xef,
	0x3b, 0x3a, 0x0e, 0x7a, 0x18, 0xf2, 0x24, 0xe1, 0x51, 0x9c, 0x9d, 0x7b, 0xa9, 0xe0, 0x19, 0xc7,
	0xf8, 0x28, 0x9d, 0x0a, 0xee, 0x0d, 0x2f, 0xc7, 0xe3, 0xee, 0xf6, 0x84, 0xf3, 0xc9, 0x0c, 0x68,
	0x90, 0xc6, 0x34, 0x60, 0x8c, 0x67, 0x41, 0x16, 0x73, 0x26, 0xf5, 0x89, 0xee, 0xd1, 0x24, 0xce,
	0xa6, 0xf9, 0xd8, 0x0b, 0x79, 0x42, 0x67, 0x41, 0x92, 0x06, 0x22, 0xda, 0x7b, 0xbd, 0xf7, 0x86,
	0x06, 0x85, 0x10, 0x55, 0x42, 0xec, 0x38, 0xfe, 0x41, 0x7d, 0x90, 0x29, 0x67, 0x12, 0xe8, 0x87,
	0x63, 0x2a, 0xca, 0x67, 0x2d, 0x41, 0x12, 0xf4, 0x78, 0xc4, 0x18, 0x88, 0x21, 0xd7, 0xa6, 0x23,
	0xf6, 0x95, 0x63, 0x8c, 0x1c, 0x16, 0x24, 0xe0, 0x5a, 0x3d, 0xab, 0xbf, 0xe1, 0xab, 0x67, 0xfc,
	0x04, 0xad, 0xa5, 0x22, 0x0e, 0xc1, 0xb5, 0x7b, 0x56, 0xdf, 0xf6, 0xf5, 0x0b, 0xde, 0x41, 0x28,
	0x01, 0x11, 0x4e, 0x03, 0x96, 0x8d, 0x4e, 0xdc, 0x4e, 0xcf, 0xea, 0x3f, 0xf0, 0x8d, 0x09, 0xde,
	0x44, 0x76, 0x1c, 0xb9, 0x8e, 0x9a, 0xdb, 0x71, 0x44, 0xbe, 0xa3, 0x67, 0xf5, 0x7e, 0x43, 0x01,
	0x41, 0x06, 0x3e, 0x9c, 0xe5, 0x20, 0x33, 0x4c, 0xd0, 0x7d, 0x09, 0x52, 0xc6, 0x9c, 0x7d, 0xe6,
	0xa7, 0xc0, 0xdc, 0x75, 0xe5, 0xdd, 0x98, 0xe1, 0x77, 0xc8, 0x99, 0x70, 0x1e, 0x29, 0xae, 0x7b,
	0xfb, 0xbb, 0xde, 0x7c, 0x60, 0xde, 0xdc, 0x32, 0xbe, 0x3a, 0x42, 0xde, 0xa2, 0xe7, 0x73, 0xc6,
	0x3a, 0x08, 0xbc, 0x8d, 0x36, 0x64, 0x1e, 0x86, 0x20, 0x25, 0x68, 0xe9, 0xbb, 0xfe, 0xe5, 0x80,
	0xcc, 0x0c, 0xe2, 0x13, 0x98, 0xc1, 0x72, 0xc4, 0xcb, 0xe6, 0x63, 0x62, 0x56, 0x6e, 0xb7, 0xc2,
	0xfc, 0x63, 0x19, 0x9c, 0x5f, 0xd2, 0x68, 0xc9, 0x64, 0x35, 0x87, 0x55, 0x71, 0xb4, 0x72, 0x57,
	0x0d, 0x71, 0xda, 0x1a, 0x42, 0x0e, 0x8c, 0x8d, 0x2a, 0xae, 0x72, 0x23, 0x17, 0xad, 0x97, 0x0b,
	0x94, 0xfb, 0x54, 0xaf, 0xe4, 0x14, 0x3d, 0xad, 0x0f, 0x7d, 0xcc, 0x41, 0x9c, 0x5f, 0xb7, 0x8b,
	0xd5, 0x9a, 0xb9, 0x7d, 0x4d, 0xe6, 0x9d, 0x3a, 0x73, 0x6e, 0x24, 0x57, 0x9a, 0xcd, 0x03, 0xda,
	0x0d, 0x40, 0xfc, 0x1e, 0xad, 0x15, 0xb5, 0x2a, 0xc0, 0x3b, 0xb7, 0xaf, 0xa2, 0x3e, 0xb3, 0x7f,
	0xe1, 0xa0, 0x47, 0xf5, 0x97, 0x9f, 0x40, 0x7c, 0x2b, 0x6e, 0xd2, 0x2f, 0xe3, 0x87, 0xa0, 0x0b,
	0x8a, 0x07, 0x8b, 0x54, 0x17, 0x5f, 0x9f, 0xee, 0x96, 0xf9, 0x6d, 0x71, 0xe9, 0xbd, 0x6a, 0x0b,
	0xb2, 0xfb, 0xfb, 0xef, 0xbf, 0x0b, 0xfb, 0x05, 0xe9, 0xd2, 0x2a, 0x04, 0x5a, 0x3b, 0xd1, 0x50,
	0xa9, 0x1c, 0x5a, 0x83, 0x06, 0x80, 0xae, 0x5e, 0x0b, 0x40, 0xe3, 0x36, 0xac, 0x0c, 0x10, 0x29,
	0x95, 0xab, 0x00, 0xba, 0x29, 0x2d, 0x00, 0x8d, 0x9a, 0xaf, 0x0c, 0x90, 0x2b, 0x95, 0x02, 0xe0,
	0x27, 0xda, 0x0c, 0x1b, 0x45, 0xc0, 0xaf, 0x6e, 0xf4, 0x37, 0x9b, 0x79, 0x93, 0xfd, 0x4b, 0x65,
	0xbf, 0x43, 0xb6, 0x16, 0xd9, 0x9f, 0x15, 0x22, 0x87, 0xd6, 0x60, 0x7c, 0x47, 0xfd, 0x90, 0x0f,
	0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x84, 0x54, 0xe8, 0x22, 0x18, 0x06, 0x00, 0x00,
}
