// Code generated by protoc-gen-go. DO NOT EDIT.
// source: redis.proto

/*
Package Aphro_Redis_pb is a generated protocol buffer package.

It is generated from these files:
	redis.proto

It has these top-level messages:
	QueryTtlRedisRequest
	QueryTtlRedisResponse
	ExpireAtRequest
	ExpireAtResponse
	IsExistsRequest
	IsExistsResponse
	QueryRedisRequest
	QueryRedisResponse
	DeleteRedisRequest
	DeleteRedisResponse
	SetRedisRequest
	SetRedisResponse
*/
package Aphro_Redis_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueryTtlRedisRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *QueryTtlRedisRequest) Reset()                    { *m = QueryTtlRedisRequest{} }
func (m *QueryTtlRedisRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryTtlRedisRequest) ProtoMessage()               {}
func (*QueryTtlRedisRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QueryTtlRedisRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type QueryTtlRedisResponse struct {
	Ttl int64 `protobuf:"varint,1,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *QueryTtlRedisResponse) Reset()                    { *m = QueryTtlRedisResponse{} }
func (m *QueryTtlRedisResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryTtlRedisResponse) ProtoMessage()               {}
func (*QueryTtlRedisResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QueryTtlRedisResponse) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type ExpireAtRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Ttl int64  `protobuf:"varint,2,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *ExpireAtRequest) Reset()                    { *m = ExpireAtRequest{} }
func (m *ExpireAtRequest) String() string            { return proto.CompactTextString(m) }
func (*ExpireAtRequest) ProtoMessage()               {}
func (*ExpireAtRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExpireAtRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ExpireAtRequest) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type ExpireAtResponse struct {
	Successed bool `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
}

func (m *ExpireAtResponse) Reset()                    { *m = ExpireAtResponse{} }
func (m *ExpireAtResponse) String() string            { return proto.CompactTextString(m) }
func (*ExpireAtResponse) ProtoMessage()               {}
func (*ExpireAtResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ExpireAtResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

type IsExistsRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *IsExistsRequest) Reset()                    { *m = IsExistsRequest{} }
func (m *IsExistsRequest) String() string            { return proto.CompactTextString(m) }
func (*IsExistsRequest) ProtoMessage()               {}
func (*IsExistsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IsExistsRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type IsExistsResponse struct {
	IsExists bool `protobuf:"varint,1,opt,name=isExists" json:"isExists,omitempty"`
}

func (m *IsExistsResponse) Reset()                    { *m = IsExistsResponse{} }
func (m *IsExistsResponse) String() string            { return proto.CompactTextString(m) }
func (*IsExistsResponse) ProtoMessage()               {}
func (*IsExistsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IsExistsResponse) GetIsExists() bool {
	if m != nil {
		return m.IsExists
	}
	return false
}

type QueryRedisRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *QueryRedisRequest) Reset()                    { *m = QueryRedisRequest{} }
func (m *QueryRedisRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRedisRequest) ProtoMessage()               {}
func (*QueryRedisRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *QueryRedisRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type QueryRedisResponse struct {
	Successed bool   `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *QueryRedisResponse) Reset()                    { *m = QueryRedisResponse{} }
func (m *QueryRedisResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryRedisResponse) ProtoMessage()               {}
func (*QueryRedisResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *QueryRedisResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

func (m *QueryRedisResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type DeleteRedisRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *DeleteRedisRequest) Reset()                    { *m = DeleteRedisRequest{} }
func (m *DeleteRedisRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRedisRequest) ProtoMessage()               {}
func (*DeleteRedisRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteRedisRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DeleteRedisResponse struct {
	Successed bool `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
}

func (m *DeleteRedisResponse) Reset()                    { *m = DeleteRedisResponse{} }
func (m *DeleteRedisResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteRedisResponse) ProtoMessage()               {}
func (*DeleteRedisResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteRedisResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

type SetRedisRequest struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Ttl   uint64 `protobuf:"varint,3,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *SetRedisRequest) Reset()                    { *m = SetRedisRequest{} }
func (m *SetRedisRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRedisRequest) ProtoMessage()               {}
func (*SetRedisRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SetRedisRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetRedisRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SetRedisRequest) GetTtl() uint64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type SetRedisResponse struct {
	Successed bool `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
}

func (m *SetRedisResponse) Reset()                    { *m = SetRedisResponse{} }
func (m *SetRedisResponse) String() string            { return proto.CompactTextString(m) }
func (*SetRedisResponse) ProtoMessage()               {}
func (*SetRedisResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SetRedisResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

func init() {
	proto.RegisterType((*QueryTtlRedisRequest)(nil), "Aphro.Redis.pb.queryTtlRedisRequest")
	proto.RegisterType((*QueryTtlRedisResponse)(nil), "Aphro.Redis.pb.queryTtlRedisResponse")
	proto.RegisterType((*ExpireAtRequest)(nil), "Aphro.Redis.pb.expireAtRequest")
	proto.RegisterType((*ExpireAtResponse)(nil), "Aphro.Redis.pb.expireAtResponse")
	proto.RegisterType((*IsExistsRequest)(nil), "Aphro.Redis.pb.isExistsRequest")
	proto.RegisterType((*IsExistsResponse)(nil), "Aphro.Redis.pb.isExistsResponse")
	proto.RegisterType((*QueryRedisRequest)(nil), "Aphro.Redis.pb.queryRedisRequest")
	proto.RegisterType((*QueryRedisResponse)(nil), "Aphro.Redis.pb.queryRedisResponse")
	proto.RegisterType((*DeleteRedisRequest)(nil), "Aphro.Redis.pb.deleteRedisRequest")
	proto.RegisterType((*DeleteRedisResponse)(nil), "Aphro.Redis.pb.deleteRedisResponse")
	proto.RegisterType((*SetRedisRequest)(nil), "Aphro.Redis.pb.setRedisRequest")
	proto.RegisterType((*SetRedisResponse)(nil), "Aphro.Redis.pb.setRedisResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RedisService service

type RedisServiceClient interface {
	// query create delete update Redis
	IsExists(ctx context.Context, in *IsExistsRequest, opts ...grpc.CallOption) (*IsExistsResponse, error)
	ExpireAt(ctx context.Context, in *ExpireAtRequest, opts ...grpc.CallOption) (*ExpireAtResponse, error)
	QueryTtl(ctx context.Context, in *QueryTtlRedisRequest, opts ...grpc.CallOption) (*QueryTtlRedisResponse, error)
	Query(ctx context.Context, in *QueryRedisRequest, opts ...grpc.CallOption) (*QueryRedisResponse, error)
	Delete(ctx context.Context, in *DeleteRedisRequest, opts ...grpc.CallOption) (*DeleteRedisResponse, error)
	Set(ctx context.Context, in *SetRedisRequest, opts ...grpc.CallOption) (*SetRedisResponse, error)
}

type redisServiceClient struct {
	cc *grpc.ClientConn
}

func NewRedisServiceClient(cc *grpc.ClientConn) RedisServiceClient {
	return &redisServiceClient{cc}
}

func (c *redisServiceClient) IsExists(ctx context.Context, in *IsExistsRequest, opts ...grpc.CallOption) (*IsExistsResponse, error) {
	out := new(IsExistsResponse)
	err := grpc.Invoke(ctx, "/Aphro.Redis.pb.RedisService/isExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisServiceClient) ExpireAt(ctx context.Context, in *ExpireAtRequest, opts ...grpc.CallOption) (*ExpireAtResponse, error) {
	out := new(ExpireAtResponse)
	err := grpc.Invoke(ctx, "/Aphro.Redis.pb.RedisService/expireAt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisServiceClient) QueryTtl(ctx context.Context, in *QueryTtlRedisRequest, opts ...grpc.CallOption) (*QueryTtlRedisResponse, error) {
	out := new(QueryTtlRedisResponse)
	err := grpc.Invoke(ctx, "/Aphro.Redis.pb.RedisService/queryTtl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisServiceClient) Query(ctx context.Context, in *QueryRedisRequest, opts ...grpc.CallOption) (*QueryRedisResponse, error) {
	out := new(QueryRedisResponse)
	err := grpc.Invoke(ctx, "/Aphro.Redis.pb.RedisService/query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisServiceClient) Delete(ctx context.Context, in *DeleteRedisRequest, opts ...grpc.CallOption) (*DeleteRedisResponse, error) {
	out := new(DeleteRedisResponse)
	err := grpc.Invoke(ctx, "/Aphro.Redis.pb.RedisService/delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisServiceClient) Set(ctx context.Context, in *SetRedisRequest, opts ...grpc.CallOption) (*SetRedisResponse, error) {
	out := new(SetRedisResponse)
	err := grpc.Invoke(ctx, "/Aphro.Redis.pb.RedisService/set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RedisService service

type RedisServiceServer interface {
	// query create delete update Redis
	IsExists(context.Context, *IsExistsRequest) (*IsExistsResponse, error)
	ExpireAt(context.Context, *ExpireAtRequest) (*ExpireAtResponse, error)
	QueryTtl(context.Context, *QueryTtlRedisRequest) (*QueryTtlRedisResponse, error)
	Query(context.Context, *QueryRedisRequest) (*QueryRedisResponse, error)
	Delete(context.Context, *DeleteRedisRequest) (*DeleteRedisResponse, error)
	Set(context.Context, *SetRedisRequest) (*SetRedisResponse, error)
}

func RegisterRedisServiceServer(s *grpc.Server, srv RedisServiceServer) {
	s.RegisterService(&_RedisService_serviceDesc, srv)
}

func _RedisService_IsExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).IsExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Redis.pb.RedisService/IsExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).IsExists(ctx, req.(*IsExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisService_ExpireAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).ExpireAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Redis.pb.RedisService/ExpireAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).ExpireAt(ctx, req.(*ExpireAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisService_QueryTtl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTtlRedisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).QueryTtl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Redis.pb.RedisService/QueryTtl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).QueryTtl(ctx, req.(*QueryTtlRedisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Redis.pb.RedisService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).Query(ctx, req.(*QueryRedisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRedisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Redis.pb.RedisService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).Delete(ctx, req.(*DeleteRedisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRedisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Redis.pb.RedisService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).Set(ctx, req.(*SetRedisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RedisService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Aphro.Redis.pb.RedisService",
	HandlerType: (*RedisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "isExists",
			Handler:    _RedisService_IsExists_Handler,
		},
		{
			MethodName: "expireAt",
			Handler:    _RedisService_ExpireAt_Handler,
		},
		{
			MethodName: "queryTtl",
			Handler:    _RedisService_QueryTtl_Handler,
		},
		{
			MethodName: "query",
			Handler:    _RedisService_Query_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _RedisService_Delete_Handler,
		},
		{
			MethodName: "set",
			Handler:    _RedisService_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redis.proto",
}

func init() { proto.RegisterFile("redis.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdf, 0x4f, 0xea, 0x30,
	0x14, 0xc7, 0xe1, 0xee, 0x42, 0xe0, 0xdc, 0x1b, 0xc1, 0x8a, 0x89, 0x59, 0x48, 0xc4, 0x22, 0x06,
	0x5f, 0x86, 0x91, 0xf8, 0x07, 0xf0, 0x60, 0x62, 0xf4, 0x41, 0x33, 0x7c, 0xf1, 0x71, 0xc0, 0x09,
	0x2e, 0x2e, 0xeb, 0x58, 0x3b, 0x02, 0xff, 0xbc, 0x31, 0xeb, 0x7e, 0x49, 0x37, 0x06, 0x6f, 0x6d,
	0xf9, 0x9c, 0x4f, 0xdb, 0xd3, 0x2f, 0x83, 0x7f, 0x3e, 0x2e, 0x6c, 0x6e, 0x78, 0x3e, 0x13, 0x8c,
	0x9c, 0x4c, 0xbc, 0x4f, 0x9f, 0x19, 0x66, 0xb4, 0x34, 0xd3, 0xbb, 0x4b, 0xc6, 0x96, 0x0e, 0x8e,
	0x2c, 0xcf, 0x1e, 0x59, 0xae, 0xcb, 0x84, 0x25, 0x6c, 0xe6, 0xc6, 0x34, 0x1d, 0x42, 0x67, 0x15,
	0xa0, 0xbf, 0x7d, 0x17, 0x8e, 0xac, 0x30, 0x71, 0x15, 0x20, 0x17, 0xa4, 0x0d, 0xda, 0x17, 0x6e,
	0x2f, 0xaa, 0xbd, 0xea, 0xb0, 0x69, 0x86, 0x43, 0x7a, 0x0b, 0xe7, 0x0a, 0xc9, 0x3d, 0xe6, 0x72,
	0x0c, 0x51, 0x21, 0x1c, 0x89, 0x6a, 0x66, 0x38, 0xa4, 0x0f, 0xd0, 0xc2, 0x8d, 0x67, 0xfb, 0x38,
	0x11, 0x7b, 0x7d, 0x49, 0xd9, 0x9f, 0xac, 0xec, 0x0e, 0xda, 0x59, 0x59, 0x2c, 0xef, 0x42, 0x93,
	0x07, 0xf3, 0x39, 0x72, 0x8e, 0x0b, 0x59, 0xdd, 0x30, 0xb3, 0x05, 0xda, 0x87, 0x96, 0xcd, 0x1f,
	0x37, 0x36, 0x17, 0x25, 0x07, 0x37, 0xa0, 0x9d, 0x41, 0xb1, 0x56, 0x87, 0x46, 0xb2, 0x16, 0x5b,
	0xd3, 0x39, 0x1d, 0xc0, 0xa9, 0xbc, 0xe8, 0x81, 0x7e, 0x3c, 0x01, 0xf9, 0x8d, 0x1d, 0x73, 0x5e,
	0xd2, 0x81, 0xda, 0xda, 0x72, 0x02, 0x94, 0xb7, 0x6e, 0x9a, 0xd1, 0x84, 0xde, 0x00, 0x59, 0xa0,
	0x83, 0x02, 0x0f, 0xec, 0x38, 0x86, 0xb3, 0x1d, 0xee, 0xa8, 0x16, 0xbd, 0x40, 0x8b, 0xa3, 0x28,
	0x37, 0x17, 0x9f, 0x2b, 0x79, 0x21, 0xad, 0x57, 0x1d, 0xfe, 0x4d, 0x5f, 0x28, 0x93, 0x1d, 0xb3,
	0xfd, 0xfd, 0xb7, 0x06, 0xff, 0x25, 0x3f, 0x45, 0x7f, 0x6d, 0xcf, 0x91, 0xbc, 0x66, 0x9d, 0x27,
	0x97, 0xc6, 0x6e, 0x56, 0x0d, 0xe5, 0x31, 0xf5, 0xde, 0x7e, 0x20, 0xda, 0x9d, 0x56, 0x42, 0x61,
	0x92, 0x9a, 0xbc, 0x50, 0x89, 0x61, 0x5e, 0xa8, 0x06, 0x8e, 0x56, 0xc8, 0x07, 0x34, 0x92, 0xa0,
	0x93, 0x6b, 0x95, 0x2f, 0xfa, 0xb3, 0xe8, 0x83, 0x03, 0x54, 0xaa, 0x7e, 0x83, 0x9a, 0xfc, 0x89,
	0x5c, 0x15, 0x56, 0xec, 0x48, 0x69, 0x19, 0x92, 0x1a, 0xa7, 0x50, 0x8f, 0x32, 0x41, 0x72, 0x7c,
	0x3e, 0x53, 0x7a, 0xbf, 0x94, 0x49, 0xa5, 0xcf, 0xa0, 0x71, 0x2c, 0xe8, 0xa6, 0x12, 0xa4, 0x7c,
	0x37, 0xd5, 0x70, 0xd0, 0xca, 0xac, 0x2e, 0xbf, 0x33, 0xe3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x41, 0x31, 0xa8, 0xdb, 0xa4, 0x04, 0x00, 0x00,
}
