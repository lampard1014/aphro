// Code generated by protoc-gen-go. DO NOT EDIT.
// source: room_charge_rule.proto

/*
Package Aphro_RoomChargeRule is a generated protocol buffer package.

It is generated from these files:
	room_charge_rule.proto

It has these top-level messages:
	RCRResult
	RCRDeleteRequest
	RCRDeleteResponse
	RCRQueryRequest
	RCRQueryResponse
	RCRUpdateRequest
	RCRUpdateResponse
	RCRCreateRequest
	RCRCreateResponse
*/
package Aphro_RoomChargeRule

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RCRResult struct {
	MerchantID   uint32  `protobuf:"varint,1,opt,name=merchantID" json:"merchantID,omitempty"`
	RCRID        uint32  `protobuf:"varint,7,opt,name=RCRID" json:"RCRID,omitempty"`
	Fee          float32 `protobuf:"fixed32,2,opt,name=fee" json:"fee,omitempty"`
	Start        string  `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	End          string  `protobuf:"bytes,4,opt,name=end" json:"end,omitempty"`
	Interval     uint32  `protobuf:"varint,5,opt,name=interval" json:"interval,omitempty"`
	IntervalUnit uint32  `protobuf:"varint,6,opt,name=intervalUnit" json:"intervalUnit,omitempty"`
	RoomID       uint32  `protobuf:"varint,8,opt,name=roomID" json:"roomID,omitempty"`
	Flag         uint32  `protobuf:"varint,9,opt,name=flag" json:"flag,omitempty"`
}

func (m *RCRResult) Reset()                    { *m = RCRResult{} }
func (m *RCRResult) String() string            { return proto.CompactTextString(m) }
func (*RCRResult) ProtoMessage()               {}
func (*RCRResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RCRResult) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *RCRResult) GetRCRID() uint32 {
	if m != nil {
		return m.RCRID
	}
	return 0
}

func (m *RCRResult) GetFee() float32 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RCRResult) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *RCRResult) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *RCRResult) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *RCRResult) GetIntervalUnit() uint32 {
	if m != nil {
		return m.IntervalUnit
	}
	return 0
}

func (m *RCRResult) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *RCRResult) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

type RCRDeleteRequest struct {
	MerchantID uint32 `protobuf:"varint,1,opt,name=merchantID" json:"merchantID,omitempty"`
	RCRID      uint32 `protobuf:"varint,7,opt,name=RCRID" json:"RCRID,omitempty"`
	RoomID     uint32 `protobuf:"varint,8,opt,name=roomID" json:"roomID,omitempty"`
}

func (m *RCRDeleteRequest) Reset()                    { *m = RCRDeleteRequest{} }
func (m *RCRDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*RCRDeleteRequest) ProtoMessage()               {}
func (*RCRDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RCRDeleteRequest) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *RCRDeleteRequest) GetRCRID() uint32 {
	if m != nil {
		return m.RCRID
	}
	return 0
}

func (m *RCRDeleteRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type RCRDeleteResponse struct {
	Successed bool `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
}

func (m *RCRDeleteResponse) Reset()                    { *m = RCRDeleteResponse{} }
func (m *RCRDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*RCRDeleteResponse) ProtoMessage()               {}
func (*RCRDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RCRDeleteResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

type RCRQueryRequest struct {
	RCRID      uint32 `protobuf:"varint,1,opt,name=RCRID" json:"RCRID,omitempty"`
	MerchantID uint32 `protobuf:"varint,2,opt,name=merchantID" json:"merchantID,omitempty"`
	RoomID     uint32 `protobuf:"varint,3,opt,name=roomID" json:"roomID,omitempty"`
}

func (m *RCRQueryRequest) Reset()                    { *m = RCRQueryRequest{} }
func (m *RCRQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*RCRQueryRequest) ProtoMessage()               {}
func (*RCRQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RCRQueryRequest) GetRCRID() uint32 {
	if m != nil {
		return m.RCRID
	}
	return 0
}

func (m *RCRQueryRequest) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *RCRQueryRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type RCRQueryResponse struct {
	Successed bool         `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
	Results   []*RCRResult `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *RCRQueryResponse) Reset()                    { *m = RCRQueryResponse{} }
func (m *RCRQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*RCRQueryResponse) ProtoMessage()               {}
func (*RCRQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RCRQueryResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

func (m *RCRQueryResponse) GetResults() []*RCRResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type RCRUpdateRequest struct {
	MerchantID   uint32  `protobuf:"varint,1,opt,name=merchantID" json:"merchantID,omitempty"`
	RCRID        uint32  `protobuf:"varint,7,opt,name=RCRID" json:"RCRID,omitempty"`
	Fee          float32 `protobuf:"fixed32,2,opt,name=fee" json:"fee,omitempty"`
	Start        string  `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	End          string  `protobuf:"bytes,4,opt,name=end" json:"end,omitempty"`
	Interval     uint32  `protobuf:"varint,5,opt,name=interval" json:"interval,omitempty"`
	IntervalUnit uint32  `protobuf:"varint,6,opt,name=intervalUnit" json:"intervalUnit,omitempty"`
	RoomID       uint32  `protobuf:"varint,8,opt,name=roomID" json:"roomID,omitempty"`
}

func (m *RCRUpdateRequest) Reset()                    { *m = RCRUpdateRequest{} }
func (m *RCRUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*RCRUpdateRequest) ProtoMessage()               {}
func (*RCRUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RCRUpdateRequest) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *RCRUpdateRequest) GetRCRID() uint32 {
	if m != nil {
		return m.RCRID
	}
	return 0
}

func (m *RCRUpdateRequest) GetFee() float32 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RCRUpdateRequest) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *RCRUpdateRequest) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *RCRUpdateRequest) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *RCRUpdateRequest) GetIntervalUnit() uint32 {
	if m != nil {
		return m.IntervalUnit
	}
	return 0
}

func (m *RCRUpdateRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type RCRUpdateResponse struct {
	Successed bool `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
}

func (m *RCRUpdateResponse) Reset()                    { *m = RCRUpdateResponse{} }
func (m *RCRUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*RCRUpdateResponse) ProtoMessage()               {}
func (*RCRUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RCRUpdateResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

type RCRCreateRequest struct {
	Fee          float32 `protobuf:"fixed32,2,opt,name=fee" json:"fee,omitempty"`
	Start        string  `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	End          string  `protobuf:"bytes,4,opt,name=end" json:"end,omitempty"`
	Interval     uint32  `protobuf:"varint,5,opt,name=interval" json:"interval,omitempty"`
	IntervalUnit uint32  `protobuf:"varint,6,opt,name=intervalUnit" json:"intervalUnit,omitempty"`
	MerchantID   uint32  `protobuf:"varint,7,opt,name=merchantID" json:"merchantID,omitempty"`
	RoomID       uint32  `protobuf:"varint,8,opt,name=roomID" json:"roomID,omitempty"`
}

func (m *RCRCreateRequest) Reset()                    { *m = RCRCreateRequest{} }
func (m *RCRCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*RCRCreateRequest) ProtoMessage()               {}
func (*RCRCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RCRCreateRequest) GetFee() float32 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RCRCreateRequest) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *RCRCreateRequest) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *RCRCreateRequest) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *RCRCreateRequest) GetIntervalUnit() uint32 {
	if m != nil {
		return m.IntervalUnit
	}
	return 0
}

func (m *RCRCreateRequest) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *RCRCreateRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type RCRCreateResponse struct {
	Successed bool   `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
	RecodeID  uint32 `protobuf:"varint,2,opt,name=recodeID" json:"recodeID,omitempty"`
}

func (m *RCRCreateResponse) Reset()                    { *m = RCRCreateResponse{} }
func (m *RCRCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*RCRCreateResponse) ProtoMessage()               {}
func (*RCRCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RCRCreateResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

func (m *RCRCreateResponse) GetRecodeID() uint32 {
	if m != nil {
		return m.RecodeID
	}
	return 0
}

func init() {
	proto.RegisterType((*RCRResult)(nil), "Aphro.RoomChargeRule.RCRResult")
	proto.RegisterType((*RCRDeleteRequest)(nil), "Aphro.RoomChargeRule.RCRDeleteRequest")
	proto.RegisterType((*RCRDeleteResponse)(nil), "Aphro.RoomChargeRule.RCRDeleteResponse")
	proto.RegisterType((*RCRQueryRequest)(nil), "Aphro.RoomChargeRule.RCRQueryRequest")
	proto.RegisterType((*RCRQueryResponse)(nil), "Aphro.RoomChargeRule.RCRQueryResponse")
	proto.RegisterType((*RCRUpdateRequest)(nil), "Aphro.RoomChargeRule.RCRUpdateRequest")
	proto.RegisterType((*RCRUpdateResponse)(nil), "Aphro.RoomChargeRule.RCRUpdateResponse")
	proto.RegisterType((*RCRCreateRequest)(nil), "Aphro.RoomChargeRule.RCRCreateRequest")
	proto.RegisterType((*RCRCreateResponse)(nil), "Aphro.RoomChargeRule.RCRCreateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RoomChargeRuleService service

type RoomChargeRuleServiceClient interface {
	// 创建计费方式
	Create(ctx context.Context, in *RCRCreateRequest, opts ...grpc.CallOption) (*RCRCreateResponse, error)
	Update(ctx context.Context, in *RCRUpdateRequest, opts ...grpc.CallOption) (*RCRUpdateResponse, error)
	Query(ctx context.Context, in *RCRQueryRequest, opts ...grpc.CallOption) (*RCRQueryResponse, error)
	Delete(ctx context.Context, in *RCRDeleteRequest, opts ...grpc.CallOption) (*RCRDeleteResponse, error)
}

type roomChargeRuleServiceClient struct {
	cc *grpc.ClientConn
}

func NewRoomChargeRuleServiceClient(cc *grpc.ClientConn) RoomChargeRuleServiceClient {
	return &roomChargeRuleServiceClient{cc}
}

func (c *roomChargeRuleServiceClient) Create(ctx context.Context, in *RCRCreateRequest, opts ...grpc.CallOption) (*RCRCreateResponse, error) {
	out := new(RCRCreateResponse)
	err := grpc.Invoke(ctx, "/Aphro.RoomChargeRule.RoomChargeRuleService/create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomChargeRuleServiceClient) Update(ctx context.Context, in *RCRUpdateRequest, opts ...grpc.CallOption) (*RCRUpdateResponse, error) {
	out := new(RCRUpdateResponse)
	err := grpc.Invoke(ctx, "/Aphro.RoomChargeRule.RoomChargeRuleService/update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomChargeRuleServiceClient) Query(ctx context.Context, in *RCRQueryRequest, opts ...grpc.CallOption) (*RCRQueryResponse, error) {
	out := new(RCRQueryResponse)
	err := grpc.Invoke(ctx, "/Aphro.RoomChargeRule.RoomChargeRuleService/query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomChargeRuleServiceClient) Delete(ctx context.Context, in *RCRDeleteRequest, opts ...grpc.CallOption) (*RCRDeleteResponse, error) {
	out := new(RCRDeleteResponse)
	err := grpc.Invoke(ctx, "/Aphro.RoomChargeRule.RoomChargeRuleService/delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoomChargeRuleService service

type RoomChargeRuleServiceServer interface {
	// 创建计费方式
	Create(context.Context, *RCRCreateRequest) (*RCRCreateResponse, error)
	Update(context.Context, *RCRUpdateRequest) (*RCRUpdateResponse, error)
	Query(context.Context, *RCRQueryRequest) (*RCRQueryResponse, error)
	Delete(context.Context, *RCRDeleteRequest) (*RCRDeleteResponse, error)
}

func RegisterRoomChargeRuleServiceServer(s *grpc.Server, srv RoomChargeRuleServiceServer) {
	s.RegisterService(&_RoomChargeRuleService_serviceDesc, srv)
}

func _RoomChargeRuleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RCRCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomChargeRuleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.RoomChargeRule.RoomChargeRuleService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomChargeRuleServiceServer).Create(ctx, req.(*RCRCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomChargeRuleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RCRUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomChargeRuleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.RoomChargeRule.RoomChargeRuleService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomChargeRuleServiceServer).Update(ctx, req.(*RCRUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomChargeRuleService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RCRQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomChargeRuleServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.RoomChargeRule.RoomChargeRuleService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomChargeRuleServiceServer).Query(ctx, req.(*RCRQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomChargeRuleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RCRDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomChargeRuleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.RoomChargeRule.RoomChargeRuleService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomChargeRuleServiceServer).Delete(ctx, req.(*RCRDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoomChargeRuleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Aphro.RoomChargeRule.RoomChargeRuleService",
	HandlerType: (*RoomChargeRuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _RoomChargeRuleService_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _RoomChargeRuleService_Update_Handler,
		},
		{
			MethodName: "query",
			Handler:    _RoomChargeRuleService_Query_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _RoomChargeRuleService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "room_charge_rule.proto",
}

func init() { proto.RegisterFile("room_charge_rule.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x95, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x65, 0xe7, 0x7b, 0x01, 0x51, 0x56, 0xa5, 0xac, 0xac, 0x00, 0xd1, 0x22, 0x4a, 0xd4,
	0x43, 0x2c, 0xca, 0x89, 0xde, 0x90, 0x73, 0xc9, 0x81, 0x03, 0x8b, 0x7a, 0x0e, 0xc6, 0x9e, 0x26,
	0x16, 0x8e, 0xd7, 0xdd, 0x5d, 0x57, 0x82, 0x03, 0x07, 0x5e, 0xa1, 0xaf, 0xc4, 0x1b, 0x70, 0xe3,
	0x8c, 0xc4, 0x6b, 0x20, 0xaf, 0x3f, 0xea, 0x55, 0x89, 0x1b, 0xc1, 0x01, 0x6e, 0x3b, 0xb3, 0x53,
	0xff, 0xe6, 0x3f, 0xfb, 0xef, 0x04, 0x1d, 0x08, 0xce, 0x37, 0xcb, 0x60, 0xed, 0x8b, 0x15, 0x2c,
	0x45, 0x16, 0xc3, 0x2c, 0x15, 0x5c, 0x71, 0xbc, 0xff, 0x2a, 0x5d, 0x0b, 0x3e, 0x63, 0x9c, 0x6f,
	0x3c, 0x7d, 0xc9, 0xb2, 0x18, 0x9c, 0xf1, 0x8a, 0xf3, 0x55, 0x0c, 0xae, 0x9f, 0x46, 0xae, 0x9f,
	0x24, 0x5c, 0xf9, 0x2a, 0xe2, 0x89, 0x2c, 0xfe, 0x86, 0xfe, 0xb4, 0xd0, 0x88, 0x79, 0x8c, 0x81,
	0xcc, 0x62, 0x85, 0x1f, 0x21, 0xb4, 0x01, 0x11, 0xac, 0xfd, 0x44, 0x2d, 0xe6, 0xc4, 0x9a, 0x58,
	0xd3, 0x3b, 0xac, 0x91, 0xc1, 0xfb, 0xa8, 0xc7, 0x3c, 0xb6, 0x98, 0x93, 0x81, 0xbe, 0x2a, 0x02,
	0xbc, 0x87, 0x3a, 0x67, 0x00, 0xc4, 0x9e, 0x58, 0x53, 0x9b, 0xe5, 0xc7, 0xbc, 0x4e, 0x2a, 0x5f,
	0x28, 0xd2, 0x99, 0x58, 0xd3, 0x11, 0x2b, 0x82, 0xbc, 0x0e, 0x92, 0x90, 0x74, 0x75, 0x2e, 0x3f,
	0x62, 0x07, 0x0d, 0xa3, 0x44, 0x81, 0xb8, 0xf0, 0x63, 0xd2, 0xd3, 0x9f, 0xac, 0x63, 0x4c, 0xd1,
	0xed, 0xea, 0x7c, 0x9a, 0x44, 0x8a, 0xf4, 0xf5, 0xbd, 0x91, 0xc3, 0x07, 0xa8, 0x9f, 0xcf, 0x62,
	0x31, 0x27, 0x43, 0x7d, 0x5b, 0x46, 0x18, 0xa3, 0xee, 0x59, 0xec, 0xaf, 0xc8, 0x48, 0x67, 0xf5,
	0x99, 0xbe, 0x43, 0x7b, 0xcc, 0x63, 0x73, 0x88, 0x41, 0x01, 0x83, 0xf3, 0x0c, 0xe4, 0x9f, 0xea,
	0xdd, 0x42, 0xa5, 0xcf, 0xd1, 0xbd, 0x06, 0x41, 0xa6, 0x3c, 0x91, 0x80, 0xc7, 0x68, 0x24, 0xb3,
	0x20, 0x00, 0x29, 0x21, 0xd4, 0x84, 0x21, 0xbb, 0x4a, 0xd0, 0x25, 0xba, 0xcb, 0x3c, 0xf6, 0x26,
	0x03, 0xf1, 0xb1, 0xea, 0xa9, 0x66, 0x5a, 0x4d, 0xa6, 0xd9, 0xa9, 0x7d, 0xad, 0xd3, 0xab, 0x9e,
	0x3a, 0x46, 0x4f, 0x1f, 0xb4, 0xea, 0x12, 0xb0, 0x4b, 0x4b, 0xf8, 0x25, 0x1a, 0x08, 0xed, 0x06,
	0x49, 0xec, 0x49, 0x67, 0x7a, 0xeb, 0xf8, 0xf1, 0xec, 0x77, 0xbe, 0x9a, 0xd5, 0xae, 0x61, 0x55,
	0x3d, 0xfd, 0x6e, 0x69, 0xda, 0x69, 0x1a, 0xfa, 0x7f, 0x3b, 0xe3, 0xff, 0xce, 0x53, 0xe5, 0xeb,
	0x56, 0xda, 0x76, 0x7a, 0xdd, 0xaf, 0xc5, 0x3c, 0x3c, 0x01, 0x8d, 0x79, 0xfc, 0x3b, 0x65, 0xe6,
	0x4b, 0x0c, 0x5a, 0x3c, 0x64, 0x2a, 0x7f, 0xad, 0x95, 0x57, 0x2a, 0x76, 0x32, 0x91, 0x83, 0x86,
	0x02, 0x02, 0x1e, 0x42, 0x6d, 0xd6, 0x3a, 0x3e, 0xbe, 0xec, 0xa2, 0xfb, 0xa6, 0x97, 0xde, 0x82,
	0xb8, 0x88, 0x02, 0xc0, 0x9f, 0x51, 0x3f, 0xd0, 0x14, 0x7c, 0xb8, 0xd5, 0x73, 0xc6, 0x30, 0x9d,
	0x67, 0x37, 0xd6, 0x15, 0xed, 0xd2, 0x27, 0x5f, 0xbe, 0xfd, 0xb8, 0xb4, 0x1f, 0x52, 0xe2, 0xe6,
	0xa2, 0xdc, 0xc6, 0xf2, 0x74, 0x0b, 0xe4, 0x89, 0x75, 0x94, 0xf3, 0x33, 0xfd, 0xbe, 0x2d, 0x7c,
	0xc3, 0xdc, 0x2d, 0x7c, 0xd3, 0x28, 0x6d, 0xfc, 0x02, 0x99, 0xf3, 0x3f, 0xa1, 0xde, 0x79, 0xfe,
	0x9f, 0x8a, 0x9f, 0x6e, 0xfd, 0x6c, 0x73, 0x55, 0x38, 0x87, 0x37, 0x95, 0x95, 0x70, 0xaa, 0xe1,
	0x63, 0xfa, 0xe0, 0x3a, 0x5c, 0xf3, 0x4a, 0xed, 0xa1, 0xde, 0x5c, 0x2d, 0xda, 0x8d, 0xe5, 0xd9,
	0xa2, 0xdd, 0x5c, 0x81, 0x6d, 0xda, 0x0b, 0xe4, 0x89, 0x75, 0xf4, 0xbe, 0xaf, 0x7f, 0x8f, 0x5e,
	0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x36, 0x52, 0x89, 0xdd, 0x06, 0x00, 0x00,
}
