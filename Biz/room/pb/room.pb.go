// Code generated by protoc-gen-go. DO NOT EDIT.
// source: room.proto

/*
Package Aphro_Room_pb is a generated protocol buffer package.

It is generated from these files:
	room.proto

It has these top-level messages:
	RSDeleteRequest
	RSDeleteResponse
	RSResult
	RSQueryRequest
	RSQueryResponse
	RSCreateRequest
	RSCreateResponse
	RSUpdateRequest
	RSUpdateResponse
	RSLocation
	RSTerminalBindRequest
	RSTerminalBindResponse
	RSTerminalUnbindRequest
	RSTerminalUnbindResponse
	RCRResult
	RCRDeleteRequest
	RCRDeleteResponse
	RCRQueryRequest
	RCRQueryResponse
	RCRUpdateRequest
	RCRUpdateResponse
	RCRCreateRequest
	RCRBatchCreateRequest
	RCRBatchCreateResponse
	RCRCreateResponse
	RSTransactionBeginRequest
	RSTransactionBeginResponse
	RSTransactionSuspendRequest
	RSTransactionSuspendResponse
	RSTransactionEndRequest
	RSTransactionEndResponse
	RSTransactionCreateRoomFeeRequest
	RSTransactionCreateRoomFeeResponse
	RSTransactionQueryRoomFeeRequest
	RSTransactionQueryRoomFeeResponse
	RSTransactionRoomFeeResult
*/
package Aphro_Room_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"
import Aphro_CommonBiz "github.com/lampard1014/aphro/CommonBiz/Response/PB"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RSDeleteRequest struct {
	RoomID       uint32 `protobuf:"varint,1,opt,name=roomID" json:"roomID,omitempty"`
	SessionToken string `protobuf:"bytes,2,opt,name=sessionToken" json:"sessionToken,omitempty"`
}

func (m *RSDeleteRequest) Reset()                    { *m = RSDeleteRequest{} }
func (m *RSDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*RSDeleteRequest) ProtoMessage()               {}
func (*RSDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RSDeleteRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *RSDeleteRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

type RSDeleteResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RSDeleteResponse) Reset()                    { *m = RSDeleteResponse{} }
func (m *RSDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*RSDeleteResponse) ProtoMessage()               {}
func (*RSDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RSDeleteResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RSResult struct {
	RoomID       uint32       `protobuf:"varint,1,opt,name=roomID" json:"roomID,omitempty"`
	MerchantID   uint32       `protobuf:"varint,2,opt,name=merchantID" json:"merchantID,omitempty"`
	TerminalCode string       `protobuf:"bytes,3,opt,name=terminalCode" json:"terminalCode,omitempty"`
	Location     *RSLocation  `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	Status       uint32       `protobuf:"varint,5,opt,name=status" json:"status,omitempty"`
	RoomName     string       `protobuf:"bytes,6,opt,name=roomName" json:"roomName,omitempty"`
	Flag         uint32       `protobuf:"varint,8,opt,name=flag" json:"flag,omitempty"`
	ChargeRules  []*RCRResult `protobuf:"bytes,7,rep,name=chargeRules" json:"chargeRules,omitempty"`
}

func (m *RSResult) Reset()                    { *m = RSResult{} }
func (m *RSResult) String() string            { return proto.CompactTextString(m) }
func (*RSResult) ProtoMessage()               {}
func (*RSResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RSResult) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *RSResult) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *RSResult) GetTerminalCode() string {
	if m != nil {
		return m.TerminalCode
	}
	return ""
}

func (m *RSResult) GetLocation() *RSLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *RSResult) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RSResult) GetRoomName() string {
	if m != nil {
		return m.RoomName
	}
	return ""
}

func (m *RSResult) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *RSResult) GetChargeRules() []*RCRResult {
	if m != nil {
		return m.ChargeRules
	}
	return nil
}

type RSQueryRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	RoomID       uint32 `protobuf:"varint,2,opt,name=roomID" json:"roomID,omitempty"`
	MerchantID   uint32 `protobuf:"varint,3,opt,name=merchantID" json:"merchantID,omitempty"`
}

func (m *RSQueryRequest) Reset()                    { *m = RSQueryRequest{} }
func (m *RSQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*RSQueryRequest) ProtoMessage()               {}
func (*RSQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RSQueryRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *RSQueryRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *RSQueryRequest) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

type RSQueryResponse struct {
	Success bool        `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Rooms   []*RSResult `protobuf:"bytes,2,rep,name=rooms" json:"rooms,omitempty"`
}

func (m *RSQueryResponse) Reset()                    { *m = RSQueryResponse{} }
func (m *RSQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*RSQueryResponse) ProtoMessage()               {}
func (*RSQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RSQueryResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RSQueryResponse) GetRooms() []*RSResult {
	if m != nil {
		return m.Rooms
	}
	return nil
}

type RSCreateRequest struct {
	TerminalCode string      `protobuf:"bytes,1,opt,name=terminalCode" json:"terminalCode,omitempty"`
	SessionToken string      `protobuf:"bytes,2,opt,name=sessionToken" json:"sessionToken,omitempty"`
	Location     *RSLocation `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	RoomName     string      `protobuf:"bytes,4,opt,name=roomName" json:"roomName,omitempty"`
}

func (m *RSCreateRequest) Reset()                    { *m = RSCreateRequest{} }
func (m *RSCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*RSCreateRequest) ProtoMessage()               {}
func (*RSCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RSCreateRequest) GetTerminalCode() string {
	if m != nil {
		return m.TerminalCode
	}
	return ""
}

func (m *RSCreateRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *RSCreateRequest) GetLocation() *RSLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *RSCreateRequest) GetRoomName() string {
	if m != nil {
		return m.RoomName
	}
	return ""
}

type RSCreateResponse struct {
	RoomID  uint32 `protobuf:"varint,1,opt,name=roomID" json:"roomID,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *RSCreateResponse) Reset()                    { *m = RSCreateResponse{} }
func (m *RSCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*RSCreateResponse) ProtoMessage()               {}
func (*RSCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RSCreateResponse) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *RSCreateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RSUpdateRequest struct {
	SessionToken *google_protobuf1.StringValue `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	RoomID       *google_protobuf1.UInt32Value `protobuf:"bytes,2,opt,name=roomID" json:"roomID,omitempty"`
	TerminalCode *google_protobuf1.StringValue `protobuf:"bytes,3,opt,name=terminalCode" json:"terminalCode,omitempty"`
	Location     *RSLocation                   `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	Status       *google_protobuf1.UInt32Value `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
	RoomName     *google_protobuf1.StringValue `protobuf:"bytes,7,opt,name=roomName" json:"roomName,omitempty"`
}

func (m *RSUpdateRequest) Reset()                    { *m = RSUpdateRequest{} }
func (m *RSUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*RSUpdateRequest) ProtoMessage()               {}
func (*RSUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RSUpdateRequest) GetSessionToken() *google_protobuf1.StringValue {
	if m != nil {
		return m.SessionToken
	}
	return nil
}

func (m *RSUpdateRequest) GetRoomID() *google_protobuf1.UInt32Value {
	if m != nil {
		return m.RoomID
	}
	return nil
}

func (m *RSUpdateRequest) GetTerminalCode() *google_protobuf1.StringValue {
	if m != nil {
		return m.TerminalCode
	}
	return nil
}

func (m *RSUpdateRequest) GetLocation() *RSLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *RSUpdateRequest) GetStatus() *google_protobuf1.UInt32Value {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RSUpdateRequest) GetRoomName() *google_protobuf1.StringValue {
	if m != nil {
		return m.RoomName
	}
	return nil
}

type RSUpdateResponse struct {
	Success bool `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *RSUpdateResponse) Reset()                    { *m = RSUpdateResponse{} }
func (m *RSUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*RSUpdateResponse) ProtoMessage()               {}
func (*RSUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RSUpdateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RSLocation struct {
	Longitude string `protobuf:"bytes,1,opt,name=longitude" json:"longitude,omitempty"`
	Latitude  string `protobuf:"bytes,2,opt,name=latitude" json:"latitude,omitempty"`
}

func (m *RSLocation) Reset()                    { *m = RSLocation{} }
func (m *RSLocation) String() string            { return proto.CompactTextString(m) }
func (*RSLocation) ProtoMessage()               {}
func (*RSLocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RSLocation) GetLongitude() string {
	if m != nil {
		return m.Longitude
	}
	return ""
}

func (m *RSLocation) GetLatitude() string {
	if m != nil {
		return m.Latitude
	}
	return ""
}

type RSTerminalBindRequest struct {
	SessionToken string      `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	TerminalCode string      `protobuf:"bytes,2,opt,name=terminalCode" json:"terminalCode,omitempty"`
	Location     *RSLocation `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	RoomID       uint32      `protobuf:"varint,4,opt,name=roomID" json:"roomID,omitempty"`
}

func (m *RSTerminalBindRequest) Reset()                    { *m = RSTerminalBindRequest{} }
func (m *RSTerminalBindRequest) String() string            { return proto.CompactTextString(m) }
func (*RSTerminalBindRequest) ProtoMessage()               {}
func (*RSTerminalBindRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RSTerminalBindRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *RSTerminalBindRequest) GetTerminalCode() string {
	if m != nil {
		return m.TerminalCode
	}
	return ""
}

func (m *RSTerminalBindRequest) GetLocation() *RSLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *RSTerminalBindRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type RSTerminalBindResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RSTerminalBindResponse) Reset()                    { *m = RSTerminalBindResponse{} }
func (m *RSTerminalBindResponse) String() string            { return proto.CompactTextString(m) }
func (*RSTerminalBindResponse) ProtoMessage()               {}
func (*RSTerminalBindResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RSTerminalBindResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RSTerminalUnbindRequest struct {
	RoomID       uint32 `protobuf:"varint,1,opt,name=roomID" json:"roomID,omitempty"`
	SessionToken string `protobuf:"bytes,2,opt,name=sessionToken" json:"sessionToken,omitempty"`
}

func (m *RSTerminalUnbindRequest) Reset()                    { *m = RSTerminalUnbindRequest{} }
func (m *RSTerminalUnbindRequest) String() string            { return proto.CompactTextString(m) }
func (*RSTerminalUnbindRequest) ProtoMessage()               {}
func (*RSTerminalUnbindRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RSTerminalUnbindRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *RSTerminalUnbindRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

type RSTerminalUnbindResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RSTerminalUnbindResponse) Reset()                    { *m = RSTerminalUnbindResponse{} }
func (m *RSTerminalUnbindResponse) String() string            { return proto.CompactTextString(m) }
func (*RSTerminalUnbindResponse) ProtoMessage()               {}
func (*RSTerminalUnbindResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RSTerminalUnbindResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// 房间计费方式
type RCRResult struct {
	MerchantID   uint32  `protobuf:"varint,1,opt,name=merchantID" json:"merchantID,omitempty"`
	RCRID        uint32  `protobuf:"varint,7,opt,name=RCRID" json:"RCRID,omitempty"`
	Fee          float32 `protobuf:"fixed32,2,opt,name=fee" json:"fee,omitempty"`
	Start        string  `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	End          string  `protobuf:"bytes,4,opt,name=end" json:"end,omitempty"`
	Interval     uint32  `protobuf:"varint,5,opt,name=interval" json:"interval,omitempty"`
	IntervalUnit uint32  `protobuf:"varint,6,opt,name=intervalUnit" json:"intervalUnit,omitempty"`
	RoomID       uint32  `protobuf:"varint,8,opt,name=roomID" json:"roomID,omitempty"`
	Flag         uint32  `protobuf:"varint,9,opt,name=flag" json:"flag,omitempty"`
	Name         string  `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
}

func (m *RCRResult) Reset()                    { *m = RCRResult{} }
func (m *RCRResult) String() string            { return proto.CompactTextString(m) }
func (*RCRResult) ProtoMessage()               {}
func (*RCRResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *RCRResult) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *RCRResult) GetRCRID() uint32 {
	if m != nil {
		return m.RCRID
	}
	return 0
}

func (m *RCRResult) GetFee() float32 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RCRResult) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *RCRResult) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *RCRResult) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *RCRResult) GetIntervalUnit() uint32 {
	if m != nil {
		return m.IntervalUnit
	}
	return 0
}

func (m *RCRResult) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *RCRResult) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *RCRResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RCRDeleteRequest struct {
	MerchantID   uint32 `protobuf:"varint,1,opt,name=merchantID" json:"merchantID,omitempty"`
	SessionToken string `protobuf:"bytes,2,opt,name=sessionToken" json:"sessionToken,omitempty"`
	RCRID        uint32 `protobuf:"varint,7,opt,name=RCRID" json:"RCRID,omitempty"`
	RoomID       uint32 `protobuf:"varint,8,opt,name=roomID" json:"roomID,omitempty"`
}

func (m *RCRDeleteRequest) Reset()                    { *m = RCRDeleteRequest{} }
func (m *RCRDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*RCRDeleteRequest) ProtoMessage()               {}
func (*RCRDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *RCRDeleteRequest) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *RCRDeleteRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *RCRDeleteRequest) GetRCRID() uint32 {
	if m != nil {
		return m.RCRID
	}
	return 0
}

func (m *RCRDeleteRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type RCRDeleteResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RCRDeleteResponse) Reset()                    { *m = RCRDeleteResponse{} }
func (m *RCRDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*RCRDeleteResponse) ProtoMessage()               {}
func (*RCRDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *RCRDeleteResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RCRQueryRequest struct {
	RCRID        uint32 `protobuf:"varint,1,opt,name=RCRID" json:"RCRID,omitempty"`
	SessionToken string `protobuf:"bytes,4,opt,name=sessionToken" json:"sessionToken,omitempty"`
	MerchantID   uint32 `protobuf:"varint,2,opt,name=merchantID" json:"merchantID,omitempty"`
	RoomID       uint32 `protobuf:"varint,3,opt,name=roomID" json:"roomID,omitempty"`
}

func (m *RCRQueryRequest) Reset()                    { *m = RCRQueryRequest{} }
func (m *RCRQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*RCRQueryRequest) ProtoMessage()               {}
func (*RCRQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *RCRQueryRequest) GetRCRID() uint32 {
	if m != nil {
		return m.RCRID
	}
	return 0
}

func (m *RCRQueryRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *RCRQueryRequest) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *RCRQueryRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type RCRQueryResponse struct {
	Success bool         `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*RCRResult `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *RCRQueryResponse) Reset()                    { *m = RCRQueryResponse{} }
func (m *RCRQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*RCRQueryResponse) ProtoMessage()               {}
func (*RCRQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *RCRQueryResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RCRQueryResponse) GetResults() []*RCRResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type RCRUpdateRequest struct {
	MerchantID   uint32  `protobuf:"varint,1,opt,name=merchantID" json:"merchantID,omitempty"`
	RCRID        uint32  `protobuf:"varint,7,opt,name=RCRID" json:"RCRID,omitempty"`
	SessionToken string  `protobuf:"bytes,9,opt,name=sessionToken" json:"sessionToken,omitempty"`
	Fee          float32 `protobuf:"fixed32,2,opt,name=fee" json:"fee,omitempty"`
	Start        string  `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	End          string  `protobuf:"bytes,4,opt,name=end" json:"end,omitempty"`
	Interval     uint32  `protobuf:"varint,5,opt,name=interval" json:"interval,omitempty"`
	IntervalUnit uint32  `protobuf:"varint,6,opt,name=intervalUnit" json:"intervalUnit,omitempty"`
	RoomID       uint32  `protobuf:"varint,8,opt,name=roomID" json:"roomID,omitempty"`
	Name         string  `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
}

func (m *RCRUpdateRequest) Reset()                    { *m = RCRUpdateRequest{} }
func (m *RCRUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*RCRUpdateRequest) ProtoMessage()               {}
func (*RCRUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *RCRUpdateRequest) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *RCRUpdateRequest) GetRCRID() uint32 {
	if m != nil {
		return m.RCRID
	}
	return 0
}

func (m *RCRUpdateRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *RCRUpdateRequest) GetFee() float32 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RCRUpdateRequest) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *RCRUpdateRequest) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *RCRUpdateRequest) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *RCRUpdateRequest) GetIntervalUnit() uint32 {
	if m != nil {
		return m.IntervalUnit
	}
	return 0
}

func (m *RCRUpdateRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *RCRUpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RCRUpdateResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RCRUpdateResponse) Reset()                    { *m = RCRUpdateResponse{} }
func (m *RCRUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*RCRUpdateResponse) ProtoMessage()               {}
func (*RCRUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *RCRUpdateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RCRCreateRequest struct {
	RcrID        uint32  `protobuf:"varint,11,opt,name=rcrID" json:"rcrID,omitempty"`
	SessionToken string  `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	Fee          float32 `protobuf:"fixed32,2,opt,name=fee" json:"fee,omitempty"`
	Start        string  `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	End          string  `protobuf:"bytes,4,opt,name=end" json:"end,omitempty"`
	Interval     uint32  `protobuf:"varint,5,opt,name=interval" json:"interval,omitempty"`
	IntervalUnit uint32  `protobuf:"varint,6,opt,name=intervalUnit" json:"intervalUnit,omitempty"`
	MerchantID   uint32  `protobuf:"varint,7,opt,name=merchantID" json:"merchantID,omitempty"`
	RoomID       uint32  `protobuf:"varint,8,opt,name=roomID" json:"roomID,omitempty"`
	Flag         uint32  `protobuf:"varint,9,opt,name=flag" json:"flag,omitempty"`
	Name         string  `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
}

func (m *RCRCreateRequest) Reset()                    { *m = RCRCreateRequest{} }
func (m *RCRCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*RCRCreateRequest) ProtoMessage()               {}
func (*RCRCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *RCRCreateRequest) GetRcrID() uint32 {
	if m != nil {
		return m.RcrID
	}
	return 0
}

func (m *RCRCreateRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *RCRCreateRequest) GetFee() float32 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RCRCreateRequest) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *RCRCreateRequest) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *RCRCreateRequest) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *RCRCreateRequest) GetIntervalUnit() uint32 {
	if m != nil {
		return m.IntervalUnit
	}
	return 0
}

func (m *RCRCreateRequest) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *RCRCreateRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *RCRCreateRequest) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *RCRCreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RCRBatchCreateRequest struct {
	SessionToken string              `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	MerchantID   uint32              `protobuf:"varint,2,opt,name=merchantID" json:"merchantID,omitempty"`
	RoomID       uint32              `protobuf:"varint,3,opt,name=roomID" json:"roomID,omitempty"`
	Rules        []*RCRCreateRequest `protobuf:"bytes,4,rep,name=rules" json:"rules,omitempty"`
}

func (m *RCRBatchCreateRequest) Reset()                    { *m = RCRBatchCreateRequest{} }
func (m *RCRBatchCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*RCRBatchCreateRequest) ProtoMessage()               {}
func (*RCRBatchCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RCRBatchCreateRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *RCRBatchCreateRequest) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *RCRBatchCreateRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *RCRBatchCreateRequest) GetRules() []*RCRCreateRequest {
	if m != nil {
		return m.Rules
	}
	return nil
}

type RCRBatchCreateResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RCRBatchCreateResponse) Reset()                    { *m = RCRBatchCreateResponse{} }
func (m *RCRBatchCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*RCRBatchCreateResponse) ProtoMessage()               {}
func (*RCRBatchCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *RCRBatchCreateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RCRCreateResponse struct {
	Success  bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	RecodeID uint32 `protobuf:"varint,2,opt,name=recodeID" json:"recodeID,omitempty"`
}

func (m *RCRCreateResponse) Reset()                    { *m = RCRCreateResponse{} }
func (m *RCRCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*RCRCreateResponse) ProtoMessage()               {}
func (*RCRCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *RCRCreateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RCRCreateResponse) GetRecodeID() uint32 {
	if m != nil {
		return m.RecodeID
	}
	return 0
}

type RSTransactionBeginRequest struct {
	SessionToken    string              `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	RoomID          uint32              `protobuf:"varint,2,opt,name=roomID" json:"roomID,omitempty"`
	RoomChargeRules []*RCRCreateRequest `protobuf:"bytes,3,rep,name=roomChargeRules" json:"roomChargeRules,omitempty"`
}

func (m *RSTransactionBeginRequest) Reset()                    { *m = RSTransactionBeginRequest{} }
func (m *RSTransactionBeginRequest) String() string            { return proto.CompactTextString(m) }
func (*RSTransactionBeginRequest) ProtoMessage()               {}
func (*RSTransactionBeginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *RSTransactionBeginRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *RSTransactionBeginRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *RSTransactionBeginRequest) GetRoomChargeRules() []*RCRCreateRequest {
	if m != nil {
		return m.RoomChargeRules
	}
	return nil
}

type RSTransactionBeginResponse struct {
	Success       bool    `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	TransactionID uint32  `protobuf:"varint,2,opt,name=transactionID" json:"transactionID,omitempty"`
	Start         uint64  `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	Fee           float32 `protobuf:"fixed32,4,opt,name=fee" json:"fee,omitempty"`
}

func (m *RSTransactionBeginResponse) Reset()                    { *m = RSTransactionBeginResponse{} }
func (m *RSTransactionBeginResponse) String() string            { return proto.CompactTextString(m) }
func (*RSTransactionBeginResponse) ProtoMessage()               {}
func (*RSTransactionBeginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *RSTransactionBeginResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RSTransactionBeginResponse) GetTransactionID() uint32 {
	if m != nil {
		return m.TransactionID
	}
	return 0
}

func (m *RSTransactionBeginResponse) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *RSTransactionBeginResponse) GetFee() float32 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type RSTransactionSuspendRequest struct {
	SessionToken  string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	RoomID        uint32 `protobuf:"varint,2,opt,name=roomID" json:"roomID,omitempty"`
	TransactionID uint32 `protobuf:"varint,3,opt,name=transactionID" json:"transactionID,omitempty"`
}

func (m *RSTransactionSuspendRequest) Reset()                    { *m = RSTransactionSuspendRequest{} }
func (m *RSTransactionSuspendRequest) String() string            { return proto.CompactTextString(m) }
func (*RSTransactionSuspendRequest) ProtoMessage()               {}
func (*RSTransactionSuspendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *RSTransactionSuspendRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *RSTransactionSuspendRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *RSTransactionSuspendRequest) GetTransactionID() uint32 {
	if m != nil {
		return m.TransactionID
	}
	return 0
}

type RSTransactionSuspendResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RSTransactionSuspendResponse) Reset()                    { *m = RSTransactionSuspendResponse{} }
func (m *RSTransactionSuspendResponse) String() string            { return proto.CompactTextString(m) }
func (*RSTransactionSuspendResponse) ProtoMessage()               {}
func (*RSTransactionSuspendResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *RSTransactionSuspendResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RSTransactionEndRequest struct {
	SessionToken  string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	RoomID        uint32 `protobuf:"varint,2,opt,name=roomID" json:"roomID,omitempty"`
	TransactionID uint32 `protobuf:"varint,3,opt,name=transactionID" json:"transactionID,omitempty"`
	MerchantID    uint32 `protobuf:"varint,4,opt,name=merchantID" json:"merchantID,omitempty"`
}

func (m *RSTransactionEndRequest) Reset()                    { *m = RSTransactionEndRequest{} }
func (m *RSTransactionEndRequest) String() string            { return proto.CompactTextString(m) }
func (*RSTransactionEndRequest) ProtoMessage()               {}
func (*RSTransactionEndRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *RSTransactionEndRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *RSTransactionEndRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *RSTransactionEndRequest) GetTransactionID() uint32 {
	if m != nil {
		return m.TransactionID
	}
	return 0
}

func (m *RSTransactionEndRequest) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

type RSTransactionEndResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RSTransactionEndResponse) Reset()                    { *m = RSTransactionEndResponse{} }
func (m *RSTransactionEndResponse) String() string            { return proto.CompactTextString(m) }
func (*RSTransactionEndResponse) ProtoMessage()               {}
func (*RSTransactionEndResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *RSTransactionEndResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RSTransactionCreateRoomFeeRequest struct {
	SessionToken  string  `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	Fee           float32 `protobuf:"fixed32,2,opt,name=fee" json:"fee,omitempty"`
	Start         string  `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	End           string  `protobuf:"bytes,4,opt,name=end" json:"end,omitempty"`
	Interval      uint32  `protobuf:"varint,5,opt,name=interval" json:"interval,omitempty"`
	IntervalUnit  uint32  `protobuf:"varint,6,opt,name=intervalUnit" json:"intervalUnit,omitempty"`
	MerchantID    uint32  `protobuf:"varint,7,opt,name=merchantID" json:"merchantID,omitempty"`
	RoomID        uint32  `protobuf:"varint,8,opt,name=roomID" json:"roomID,omitempty"`
	TransactionID uint32  `protobuf:"varint,9,opt,name=transactionID" json:"transactionID,omitempty"`
	Flag          uint32  `protobuf:"varint,10,opt,name=flag" json:"flag,omitempty"`
}

func (m *RSTransactionCreateRoomFeeRequest) Reset()         { *m = RSTransactionCreateRoomFeeRequest{} }
func (m *RSTransactionCreateRoomFeeRequest) String() string { return proto.CompactTextString(m) }
func (*RSTransactionCreateRoomFeeRequest) ProtoMessage()    {}
func (*RSTransactionCreateRoomFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{31}
}

func (m *RSTransactionCreateRoomFeeRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *RSTransactionCreateRoomFeeRequest) GetFee() float32 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RSTransactionCreateRoomFeeRequest) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *RSTransactionCreateRoomFeeRequest) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *RSTransactionCreateRoomFeeRequest) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *RSTransactionCreateRoomFeeRequest) GetIntervalUnit() uint32 {
	if m != nil {
		return m.IntervalUnit
	}
	return 0
}

func (m *RSTransactionCreateRoomFeeRequest) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *RSTransactionCreateRoomFeeRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *RSTransactionCreateRoomFeeRequest) GetTransactionID() uint32 {
	if m != nil {
		return m.TransactionID
	}
	return 0
}

func (m *RSTransactionCreateRoomFeeRequest) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

type RSTransactionCreateRoomFeeResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RSTransactionCreateRoomFeeResponse) Reset()         { *m = RSTransactionCreateRoomFeeResponse{} }
func (m *RSTransactionCreateRoomFeeResponse) String() string { return proto.CompactTextString(m) }
func (*RSTransactionCreateRoomFeeResponse) ProtoMessage()    {}
func (*RSTransactionCreateRoomFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32}
}

func (m *RSTransactionCreateRoomFeeResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RSTransactionQueryRoomFeeRequest struct {
	SessionToken         string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	TransactionID        uint32 `protobuf:"varint,9,opt,name=transactionID" json:"transactionID,omitempty"`
	TransactionRoomFeeID uint32 `protobuf:"varint,2,opt,name=transactionRoomFeeID" json:"transactionRoomFeeID,omitempty"`
	RoomID               uint32 `protobuf:"varint,8,opt,name=roomID" json:"roomID,omitempty"`
}

func (m *RSTransactionQueryRoomFeeRequest) Reset()         { *m = RSTransactionQueryRoomFeeRequest{} }
func (m *RSTransactionQueryRoomFeeRequest) String() string { return proto.CompactTextString(m) }
func (*RSTransactionQueryRoomFeeRequest) ProtoMessage()    {}
func (*RSTransactionQueryRoomFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33}
}

func (m *RSTransactionQueryRoomFeeRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *RSTransactionQueryRoomFeeRequest) GetTransactionID() uint32 {
	if m != nil {
		return m.TransactionID
	}
	return 0
}

func (m *RSTransactionQueryRoomFeeRequest) GetTransactionRoomFeeID() uint32 {
	if m != nil {
		return m.TransactionRoomFeeID
	}
	return 0
}

func (m *RSTransactionQueryRoomFeeRequest) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type RSTransactionQueryRoomFeeResponse struct {
	Success  bool                          `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	RoomFees []*RSTransactionRoomFeeResult `protobuf:"bytes,2,rep,name=roomFees" json:"roomFees,omitempty"`
}

func (m *RSTransactionQueryRoomFeeResponse) Reset()         { *m = RSTransactionQueryRoomFeeResponse{} }
func (m *RSTransactionQueryRoomFeeResponse) String() string { return proto.CompactTextString(m) }
func (*RSTransactionQueryRoomFeeResponse) ProtoMessage()    {}
func (*RSTransactionQueryRoomFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{34}
}

func (m *RSTransactionQueryRoomFeeResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RSTransactionQueryRoomFeeResponse) GetRoomFees() []*RSTransactionRoomFeeResult {
	if m != nil {
		return m.RoomFees
	}
	return nil
}

type RSTransactionRoomFeeResult struct {
	TransactionRoomFeeID uint32  `protobuf:"varint,1,opt,name=transactionRoomFeeID" json:"transactionRoomFeeID,omitempty"`
	Fee                  float32 `protobuf:"fixed32,2,opt,name=fee" json:"fee,omitempty"`
	CreateTime           uint32  `protobuf:"varint,12,opt,name=createTime" json:"createTime,omitempty"`
	EndTime              uint32  `protobuf:"varint,13,opt,name=endTime" json:"endTime,omitempty"`
	FeePerInterval       float32 `protobuf:"fixed32,11,opt,name=feePerInterval" json:"feePerInterval,omitempty"`
	Start                string  `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	End                  string  `protobuf:"bytes,4,opt,name=end" json:"end,omitempty"`
	Interval             uint32  `protobuf:"varint,5,opt,name=interval" json:"interval,omitempty"`
	IntervalUnit         uint32  `protobuf:"varint,6,opt,name=intervalUnit" json:"intervalUnit,omitempty"`
	MerchantID           uint32  `protobuf:"varint,7,opt,name=merchantID" json:"merchantID,omitempty"`
	RoomID               uint32  `protobuf:"varint,8,opt,name=roomID" json:"roomID,omitempty"`
	TransactionID        uint32  `protobuf:"varint,9,opt,name=transactionID" json:"transactionID,omitempty"`
	Flag                 uint32  `protobuf:"varint,10,opt,name=flag" json:"flag,omitempty"`
}

func (m *RSTransactionRoomFeeResult) Reset()                    { *m = RSTransactionRoomFeeResult{} }
func (m *RSTransactionRoomFeeResult) String() string            { return proto.CompactTextString(m) }
func (*RSTransactionRoomFeeResult) ProtoMessage()               {}
func (*RSTransactionRoomFeeResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *RSTransactionRoomFeeResult) GetTransactionRoomFeeID() uint32 {
	if m != nil {
		return m.TransactionRoomFeeID
	}
	return 0
}

func (m *RSTransactionRoomFeeResult) GetFee() float32 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RSTransactionRoomFeeResult) GetCreateTime() uint32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *RSTransactionRoomFeeResult) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *RSTransactionRoomFeeResult) GetFeePerInterval() float32 {
	if m != nil {
		return m.FeePerInterval
	}
	return 0
}

func (m *RSTransactionRoomFeeResult) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *RSTransactionRoomFeeResult) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *RSTransactionRoomFeeResult) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *RSTransactionRoomFeeResult) GetIntervalUnit() uint32 {
	if m != nil {
		return m.IntervalUnit
	}
	return 0
}

func (m *RSTransactionRoomFeeResult) GetMerchantID() uint32 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *RSTransactionRoomFeeResult) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *RSTransactionRoomFeeResult) GetTransactionID() uint32 {
	if m != nil {
		return m.TransactionID
	}
	return 0
}

func (m *RSTransactionRoomFeeResult) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func init() {
	proto.RegisterType((*RSDeleteRequest)(nil), "Aphro.Room.pb.RSDeleteRequest")
	proto.RegisterType((*RSDeleteResponse)(nil), "Aphro.Room.pb.RSDeleteResponse")
	proto.RegisterType((*RSResult)(nil), "Aphro.Room.pb.RSResult")
	proto.RegisterType((*RSQueryRequest)(nil), "Aphro.Room.pb.RSQueryRequest")
	proto.RegisterType((*RSQueryResponse)(nil), "Aphro.Room.pb.RSQueryResponse")
	proto.RegisterType((*RSCreateRequest)(nil), "Aphro.Room.pb.RSCreateRequest")
	proto.RegisterType((*RSCreateResponse)(nil), "Aphro.Room.pb.RSCreateResponse")
	proto.RegisterType((*RSUpdateRequest)(nil), "Aphro.Room.pb.RSUpdateRequest")
	proto.RegisterType((*RSUpdateResponse)(nil), "Aphro.Room.pb.RSUpdateResponse")
	proto.RegisterType((*RSLocation)(nil), "Aphro.Room.pb.RSLocation")
	proto.RegisterType((*RSTerminalBindRequest)(nil), "Aphro.Room.pb.RSTerminalBindRequest")
	proto.RegisterType((*RSTerminalBindResponse)(nil), "Aphro.Room.pb.RSTerminalBindResponse")
	proto.RegisterType((*RSTerminalUnbindRequest)(nil), "Aphro.Room.pb.RSTerminalUnbindRequest")
	proto.RegisterType((*RSTerminalUnbindResponse)(nil), "Aphro.Room.pb.RSTerminalUnbindResponse")
	proto.RegisterType((*RCRResult)(nil), "Aphro.Room.pb.RCRResult")
	proto.RegisterType((*RCRDeleteRequest)(nil), "Aphro.Room.pb.RCRDeleteRequest")
	proto.RegisterType((*RCRDeleteResponse)(nil), "Aphro.Room.pb.RCRDeleteResponse")
	proto.RegisterType((*RCRQueryRequest)(nil), "Aphro.Room.pb.RCRQueryRequest")
	proto.RegisterType((*RCRQueryResponse)(nil), "Aphro.Room.pb.RCRQueryResponse")
	proto.RegisterType((*RCRUpdateRequest)(nil), "Aphro.Room.pb.RCRUpdateRequest")
	proto.RegisterType((*RCRUpdateResponse)(nil), "Aphro.Room.pb.RCRUpdateResponse")
	proto.RegisterType((*RCRCreateRequest)(nil), "Aphro.Room.pb.RCRCreateRequest")
	proto.RegisterType((*RCRBatchCreateRequest)(nil), "Aphro.Room.pb.RCRBatchCreateRequest")
	proto.RegisterType((*RCRBatchCreateResponse)(nil), "Aphro.Room.pb.RCRBatchCreateResponse")
	proto.RegisterType((*RCRCreateResponse)(nil), "Aphro.Room.pb.RCRCreateResponse")
	proto.RegisterType((*RSTransactionBeginRequest)(nil), "Aphro.Room.pb.RSTransactionBeginRequest")
	proto.RegisterType((*RSTransactionBeginResponse)(nil), "Aphro.Room.pb.RSTransactionBeginResponse")
	proto.RegisterType((*RSTransactionSuspendRequest)(nil), "Aphro.Room.pb.RSTransactionSuspendRequest")
	proto.RegisterType((*RSTransactionSuspendResponse)(nil), "Aphro.Room.pb.RSTransactionSuspendResponse")
	proto.RegisterType((*RSTransactionEndRequest)(nil), "Aphro.Room.pb.RSTransactionEndRequest")
	proto.RegisterType((*RSTransactionEndResponse)(nil), "Aphro.Room.pb.RSTransactionEndResponse")
	proto.RegisterType((*RSTransactionCreateRoomFeeRequest)(nil), "Aphro.Room.pb.RSTransactionCreateRoomFeeRequest")
	proto.RegisterType((*RSTransactionCreateRoomFeeResponse)(nil), "Aphro.Room.pb.RSTransactionCreateRoomFeeResponse")
	proto.RegisterType((*RSTransactionQueryRoomFeeRequest)(nil), "Aphro.Room.pb.RSTransactionQueryRoomFeeRequest")
	proto.RegisterType((*RSTransactionQueryRoomFeeResponse)(nil), "Aphro.Room.pb.RSTransactionQueryRoomFeeResponse")
	proto.RegisterType((*RSTransactionRoomFeeResult)(nil), "Aphro.Room.pb.RSTransactionRoomFeeResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RoomService service

type RoomServiceClient interface {
	// 绑定二维码终端信息
	TerminalBind(ctx context.Context, in *RSTerminalBindRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 解绑二维码终端信息
	TerminalUnbind(ctx context.Context, in *RSTerminalUnbindRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 直接创建房间 同时绑定二维码
	CreateRoom(ctx context.Context, in *RSCreateRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 更新房间的信息 同时更新计费方式
	UpdateRoom(ctx context.Context, in *RSUpdateRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 删除房间
	DeleteRoom(ctx context.Context, in *RSDeleteRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 查询房间
	QueryRoom(ctx context.Context, in *RSQueryRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 创建计费方式
	CreateRoomChargeRule(ctx context.Context, in *RCRCreateRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 批量创建计费方式
	BatchCreateRoomChargeRule(ctx context.Context, in *RCRBatchCreateRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 更新计费方式
	UpdateRoomChargeRule(ctx context.Context, in *RCRUpdateRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 查询计费方式
	QueryRoomChargeRule(ctx context.Context, in *RCRQueryRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 删除计费方式
	DeleteRoomChargeRule(ctx context.Context, in *RCRDeleteRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 开始一个房间的事务
	RoomTransactionBegin(ctx context.Context, in *RSTransactionBeginRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 挂起一个房间的事务
	RoomTransactionSuspend(ctx context.Context, in *RSTransactionSuspendRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 结束一个房间的事务
	RoomTransactionEnd(ctx context.Context, in *RSTransactionEndRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 创建一个房间的房费
	RoomTransactionCreateRoomFee(ctx context.Context, in *RSTransactionCreateRoomFeeRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
	// 查询一个房间的房费
	RoomTransactionQueryRoomFee(ctx context.Context, in *RSTransactionQueryRoomFeeRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error)
}

type roomServiceClient struct {
	cc *grpc.ClientConn
}

func NewRoomServiceClient(cc *grpc.ClientConn) RoomServiceClient {
	return &roomServiceClient{cc}
}

func (c *roomServiceClient) TerminalBind(ctx context.Context, in *RSTerminalBindRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Room.pb.RoomService/terminalBind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) TerminalUnbind(ctx context.Context, in *RSTerminalUnbindRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Room.pb.RoomService/terminalUnbind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) CreateRoom(ctx context.Context, in *RSCreateRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Room.pb.RoomService/createRoom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) UpdateRoom(ctx context.Context, in *RSUpdateRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Room.pb.RoomService/updateRoom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) DeleteRoom(ctx context.Context, in *RSDeleteRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Room.pb.RoomService/deleteRoom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) QueryRoom(ctx context.Context, in *RSQueryRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Room.pb.RoomService/queryRoom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) CreateRoomChargeRule(ctx context.Context, in *RCRCreateRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Room.pb.RoomService/createRoomChargeRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) BatchCreateRoomChargeRule(ctx context.Context, in *RCRBatchCreateRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Room.pb.RoomService/batchCreateRoomChargeRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) UpdateRoomChargeRule(ctx context.Context, in *RCRUpdateRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Room.pb.RoomService/updateRoomChargeRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) QueryRoomChargeRule(ctx context.Context, in *RCRQueryRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Room.pb.RoomService/queryRoomChargeRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) DeleteRoomChargeRule(ctx context.Context, in *RCRDeleteRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Room.pb.RoomService/deleteRoomChargeRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) RoomTransactionBegin(ctx context.Context, in *RSTransactionBeginRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Room.pb.RoomService/roomTransactionBegin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) RoomTransactionSuspend(ctx context.Context, in *RSTransactionSuspendRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Room.pb.RoomService/roomTransactionSuspend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) RoomTransactionEnd(ctx context.Context, in *RSTransactionEndRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Room.pb.RoomService/roomTransactionEnd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) RoomTransactionCreateRoomFee(ctx context.Context, in *RSTransactionCreateRoomFeeRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Room.pb.RoomService/roomTransactionCreateRoomFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) RoomTransactionQueryRoomFee(ctx context.Context, in *RSTransactionQueryRoomFeeRequest, opts ...grpc.CallOption) (*Aphro_CommonBiz.Response, error) {
	out := new(Aphro_CommonBiz.Response)
	err := grpc.Invoke(ctx, "/Aphro.Room.pb.RoomService/roomTransactionQueryRoomFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoomService service

type RoomServiceServer interface {
	// 绑定二维码终端信息
	TerminalBind(context.Context, *RSTerminalBindRequest) (*Aphro_CommonBiz.Response, error)
	// 解绑二维码终端信息
	TerminalUnbind(context.Context, *RSTerminalUnbindRequest) (*Aphro_CommonBiz.Response, error)
	// 直接创建房间 同时绑定二维码
	CreateRoom(context.Context, *RSCreateRequest) (*Aphro_CommonBiz.Response, error)
	// 更新房间的信息 同时更新计费方式
	UpdateRoom(context.Context, *RSUpdateRequest) (*Aphro_CommonBiz.Response, error)
	// 删除房间
	DeleteRoom(context.Context, *RSDeleteRequest) (*Aphro_CommonBiz.Response, error)
	// 查询房间
	QueryRoom(context.Context, *RSQueryRequest) (*Aphro_CommonBiz.Response, error)
	// 创建计费方式
	CreateRoomChargeRule(context.Context, *RCRCreateRequest) (*Aphro_CommonBiz.Response, error)
	// 批量创建计费方式
	BatchCreateRoomChargeRule(context.Context, *RCRBatchCreateRequest) (*Aphro_CommonBiz.Response, error)
	// 更新计费方式
	UpdateRoomChargeRule(context.Context, *RCRUpdateRequest) (*Aphro_CommonBiz.Response, error)
	// 查询计费方式
	QueryRoomChargeRule(context.Context, *RCRQueryRequest) (*Aphro_CommonBiz.Response, error)
	// 删除计费方式
	DeleteRoomChargeRule(context.Context, *RCRDeleteRequest) (*Aphro_CommonBiz.Response, error)
	// 开始一个房间的事务
	RoomTransactionBegin(context.Context, *RSTransactionBeginRequest) (*Aphro_CommonBiz.Response, error)
	// 挂起一个房间的事务
	RoomTransactionSuspend(context.Context, *RSTransactionSuspendRequest) (*Aphro_CommonBiz.Response, error)
	// 结束一个房间的事务
	RoomTransactionEnd(context.Context, *RSTransactionEndRequest) (*Aphro_CommonBiz.Response, error)
	// 创建一个房间的房费
	RoomTransactionCreateRoomFee(context.Context, *RSTransactionCreateRoomFeeRequest) (*Aphro_CommonBiz.Response, error)
	// 查询一个房间的房费
	RoomTransactionQueryRoomFee(context.Context, *RSTransactionQueryRoomFeeRequest) (*Aphro_CommonBiz.Response, error)
}

func RegisterRoomServiceServer(s *grpc.Server, srv RoomServiceServer) {
	s.RegisterService(&_RoomService_serviceDesc, srv)
}

func _RoomService_TerminalBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RSTerminalBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).TerminalBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Room.pb.RoomService/TerminalBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).TerminalBind(ctx, req.(*RSTerminalBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_TerminalUnbind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RSTerminalUnbindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).TerminalUnbind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Room.pb.RoomService/TerminalUnbind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).TerminalUnbind(ctx, req.(*RSTerminalUnbindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RSCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Room.pb.RoomService/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).CreateRoom(ctx, req.(*RSCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RSUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Room.pb.RoomService/UpdateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).UpdateRoom(ctx, req.(*RSUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RSDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Room.pb.RoomService/DeleteRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).DeleteRoom(ctx, req.(*RSDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_QueryRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RSQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).QueryRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Room.pb.RoomService/QueryRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).QueryRoom(ctx, req.(*RSQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_CreateRoomChargeRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RCRCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).CreateRoomChargeRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Room.pb.RoomService/CreateRoomChargeRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).CreateRoomChargeRule(ctx, req.(*RCRCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_BatchCreateRoomChargeRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RCRBatchCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).BatchCreateRoomChargeRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Room.pb.RoomService/BatchCreateRoomChargeRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).BatchCreateRoomChargeRule(ctx, req.(*RCRBatchCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_UpdateRoomChargeRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RCRUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).UpdateRoomChargeRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Room.pb.RoomService/UpdateRoomChargeRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).UpdateRoomChargeRule(ctx, req.(*RCRUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_QueryRoomChargeRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RCRQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).QueryRoomChargeRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Room.pb.RoomService/QueryRoomChargeRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).QueryRoomChargeRule(ctx, req.(*RCRQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_DeleteRoomChargeRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RCRDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).DeleteRoomChargeRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Room.pb.RoomService/DeleteRoomChargeRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).DeleteRoomChargeRule(ctx, req.(*RCRDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_RoomTransactionBegin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RSTransactionBeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).RoomTransactionBegin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Room.pb.RoomService/RoomTransactionBegin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).RoomTransactionBegin(ctx, req.(*RSTransactionBeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_RoomTransactionSuspend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RSTransactionSuspendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).RoomTransactionSuspend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Room.pb.RoomService/RoomTransactionSuspend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).RoomTransactionSuspend(ctx, req.(*RSTransactionSuspendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_RoomTransactionEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RSTransactionEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).RoomTransactionEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Room.pb.RoomService/RoomTransactionEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).RoomTransactionEnd(ctx, req.(*RSTransactionEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_RoomTransactionCreateRoomFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RSTransactionCreateRoomFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).RoomTransactionCreateRoomFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Room.pb.RoomService/RoomTransactionCreateRoomFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).RoomTransactionCreateRoomFee(ctx, req.(*RSTransactionCreateRoomFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_RoomTransactionQueryRoomFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RSTransactionQueryRoomFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).RoomTransactionQueryRoomFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Room.pb.RoomService/RoomTransactionQueryRoomFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).RoomTransactionQueryRoomFee(ctx, req.(*RSTransactionQueryRoomFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoomService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Aphro.Room.pb.RoomService",
	HandlerType: (*RoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "terminalBind",
			Handler:    _RoomService_TerminalBind_Handler,
		},
		{
			MethodName: "terminalUnbind",
			Handler:    _RoomService_TerminalUnbind_Handler,
		},
		{
			MethodName: "createRoom",
			Handler:    _RoomService_CreateRoom_Handler,
		},
		{
			MethodName: "updateRoom",
			Handler:    _RoomService_UpdateRoom_Handler,
		},
		{
			MethodName: "deleteRoom",
			Handler:    _RoomService_DeleteRoom_Handler,
		},
		{
			MethodName: "queryRoom",
			Handler:    _RoomService_QueryRoom_Handler,
		},
		{
			MethodName: "createRoomChargeRule",
			Handler:    _RoomService_CreateRoomChargeRule_Handler,
		},
		{
			MethodName: "batchCreateRoomChargeRule",
			Handler:    _RoomService_BatchCreateRoomChargeRule_Handler,
		},
		{
			MethodName: "updateRoomChargeRule",
			Handler:    _RoomService_UpdateRoomChargeRule_Handler,
		},
		{
			MethodName: "queryRoomChargeRule",
			Handler:    _RoomService_QueryRoomChargeRule_Handler,
		},
		{
			MethodName: "deleteRoomChargeRule",
			Handler:    _RoomService_DeleteRoomChargeRule_Handler,
		},
		{
			MethodName: "roomTransactionBegin",
			Handler:    _RoomService_RoomTransactionBegin_Handler,
		},
		{
			MethodName: "roomTransactionSuspend",
			Handler:    _RoomService_RoomTransactionSuspend_Handler,
		},
		{
			MethodName: "roomTransactionEnd",
			Handler:    _RoomService_RoomTransactionEnd_Handler,
		},
		{
			MethodName: "roomTransactionCreateRoomFee",
			Handler:    _RoomService_RoomTransactionCreateRoomFee_Handler,
		},
		{
			MethodName: "roomTransactionQueryRoomFee",
			Handler:    _RoomService_RoomTransactionQueryRoomFee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "room.proto",
}

func init() { proto.RegisterFile("room.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1633 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0x5d, 0x6f, 0x1b, 0x45,
	0x17, 0xd6, 0xda, 0x4e, 0x93, 0x1c, 0x37, 0x6d, 0xba, 0x4d, 0x93, 0x8d, 0x9b, 0xa6, 0x79, 0xe7,
	0x8d, 0xaa, 0xbc, 0xd5, 0x5b, 0x6f, 0xeb, 0xa6, 0x52, 0xe9, 0x05, 0x6a, 0xe3, 0xb4, 0x92, 0x25,
	0x40, 0x65, 0x9c, 0x70, 0x81, 0x84, 0xe8, 0xda, 0x9e, 0x38, 0x2b, 0xd6, 0xbb, 0xee, 0x7e, 0xb4,
	0x2a, 0x08, 0x55, 0x82, 0xc2, 0x0f, 0x00, 0x21, 0x2e, 0x90, 0x90, 0x00, 0x89, 0x0b, 0x84, 0xb8,
	0xe1, 0x86, 0xff, 0xc1, 0x5f, 0xe0, 0x17, 0x70, 0xcb, 0x0d, 0x9a, 0x99, 0xfd, 0x98, 0xd9, 0x5d,
	0xef, 0xda, 0xa5, 0xe2, 0xeb, 0x6e, 0x67, 0x3c, 0x33, 0xcf, 0x73, 0xce, 0x79, 0xe6, 0x9c, 0x33,
	0x06, 0x70, 0x1d, 0x67, 0xd4, 0x1c, 0xbb, 0x8e, 0xef, 0xa8, 0x4b, 0x77, 0xc6, 0xc7, 0xae, 0xd3,
	0xc4, 0x6c, 0xa6, 0xd7, 0xd8, 0x18, 0x3a, 0xce, 0xd0, 0x22, 0xba, 0x31, 0x36, 0x75, 0xc3, 0xb6,
	0x1d, 0xdf, 0xf0, 0x4d, 0xc7, 0xf6, 0xf8, 0xe2, 0xc6, 0x4b, 0x43, 0xd3, 0x3f, 0x0e, 0x7a, 0xcd,
	0xbe, 0x33, 0xd2, 0x87, 0x8e, 0x65, 0xd8, 0x43, 0x9d, 0xfd, 0xd0, 0x0b, 0x8e, 0xf4, 0xb1, 0xff,
	0x64, 0x4c, 0x3c, 0xfd, 0xb1, 0x6b, 0x8c, 0xc7, 0xc4, 0x4d, 0x3e, 0xc2, 0xad, 0x77, 0x84, 0xad,
	0x96, 0x31, 0x1a, 0x1b, 0xee, 0xe0, 0xda, 0xd5, 0x6b, 0xbb, 0xba, 0x41, 0xe1, 0xf5, 0xb6, 0x33,
	0x1a, 0x39, 0xf6, 0x9e, 0xf9, 0xae, 0x8e, 0x89, 0x37, 0x76, 0x6c, 0x8f, 0xe8, 0xf7, 0xf7, 0x74,
	0x37, 0xfc, 0xe6, 0x47, 0xa0, 0x57, 0xe1, 0x34, 0xee, 0xee, 0x13, 0x8b, 0xf8, 0x04, 0x93, 0x87,
	0x01, 0xf1, 0x7c, 0x75, 0x15, 0x4e, 0x50, 0x5b, 0x3a, 0xfb, 0x9a, 0xb2, 0xa5, 0xec, 0x2c, 0xe1,
	0x70, 0xa4, 0x22, 0x38, 0xe9, 0x11, 0xcf, 0x33, 0x1d, 0xfb, 0xc0, 0x79, 0x87, 0xd8, 0x5a, 0x65,
	0x4b, 0xd9, 0x59, 0xc4, 0xd2, 0x1c, 0xfa, 0x3f, 0x2c, 0x27, 0xc7, 0x71, 0x20, 0x55, 0x83, 0x79,
	0x2f, 0xe8, 0xf7, 0x89, 0xe7, 0xb1, 0x03, 0x17, 0x70, 0x34, 0x44, 0x5f, 0x55, 0x60, 0x01, 0x77,
	0x31, 0xf1, 0x02, 0x6b, 0x32, 0xec, 0x26, 0xc0, 0x88, 0xb8, 0xfd, 0x63, 0xc3, 0xf6, 0x3b, 0xfb,
	0x0c, 0x74, 0x09, 0x0b, 0x33, 0x94, 0x96, 0x4f, 0xdc, 0x91, 0x69, 0x1b, 0x56, 0xdb, 0x19, 0x10,
	0xad, 0xca, 0x69, 0x89, 0x73, 0xea, 0x0d, 0x58, 0xb0, 0x9c, 0x3e, 0x73, 0xbb, 0x56, 0xdb, 0x52,
	0x76, 0xea, 0xad, 0xf5, 0xa6, 0x14, 0xa3, 0x26, 0xee, 0xbe, 0x12, 0x2e, 0xc0, 0xf1, 0x52, 0x4a,
	0xc9, 0xf3, 0x0d, 0x3f, 0xf0, 0xb4, 0x39, 0x4e, 0x89, 0x8f, 0xd4, 0x06, 0x2c, 0x50, 0x72, 0xaf,
	0x19, 0x23, 0xa2, 0x9d, 0x60, 0x70, 0xf1, 0x58, 0x55, 0xa1, 0x76, 0x64, 0x19, 0x43, 0x6d, 0x81,
	0xed, 0x60, 0xdf, 0xea, 0x2d, 0xa8, 0xf7, 0x8f, 0x0d, 0x77, 0x48, 0x70, 0x60, 0x11, 0x4f, 0x9b,
	0xdf, 0xaa, 0xee, 0xd4, 0x5b, 0x5a, 0x9a, 0x41, 0x1b, 0x73, 0x4f, 0x60, 0x71, 0x31, 0xb2, 0xe0,
	0x14, 0xee, 0xbe, 0x1e, 0x10, 0xf7, 0x49, 0x14, 0x9f, 0x74, 0x1c, 0x94, 0x6c, 0x1c, 0x04, 0x67,
	0x56, 0x0a, 0x9c, 0x59, 0x4d, 0x3b, 0x13, 0xbd, 0x49, 0xe5, 0x10, 0xa2, 0x95, 0x85, 0x4f, 0xbd,
	0x02, 0x73, 0xf4, 0x58, 0x4f, 0xab, 0x30, 0x83, 0xd6, 0x32, 0x2e, 0x0d, 0xed, 0xe1, 0xab, 0xd0,
	0xf7, 0x0a, 0x3d, 0xbc, 0xed, 0x12, 0x23, 0xd1, 0x5a, 0x3a, 0x78, 0x4a, 0x4e, 0xf0, 0xa6, 0xd0,
	0x9d, 0x14, 0xe0, 0xea, 0xf4, 0x01, 0x16, 0x03, 0x59, 0x93, 0x03, 0x89, 0xf6, 0xa9, 0x94, 0x23,
	0xb6, 0xa1, 0x2f, 0x26, 0x69, 0x54, 0xf0, 0x51, 0x45, 0x96, 0xf8, 0xaf, 0x15, 0x6a, 0xf4, 0xe1,
	0x78, 0x20, 0x18, 0x7d, 0x3b, 0x27, 0x80, 0xf5, 0xd6, 0x46, 0x93, 0xa7, 0x89, 0x66, 0x74, 0xfb,
	0x9b, 0x5d, 0xdf, 0x35, 0xed, 0xe1, 0x1b, 0x86, 0x15, 0x90, 0x94, 0xb9, 0xbb, 0x52, 0x78, 0xf3,
	0xf6, 0x1e, 0x76, 0x6c, 0xff, 0x7a, 0x8b, 0xef, 0x8d, 0x58, 0xde, 0xce, 0xb9, 0x29, 0xa5, 0xb8,
	0x2f, 0xe2, 0x1e, 0xed, 0x4a, 0xf7, 0xa8, 0x94, 0x6e, 0x78, 0xcb, 0x6e, 0x0a, 0xc1, 0x99, 0x9f,
	0x82, 0x6a, 0x12, 0x3a, 0x96, 0x85, 0x22, 0x9f, 0x67, 0x65, 0x9c, 0x0a, 0xd1, 0x3d, 0x80, 0x84,
	0xb5, 0xba, 0x01, 0x8b, 0x96, 0x63, 0x0f, 0x4d, 0x3f, 0x88, 0xe5, 0x98, 0x4c, 0x50, 0xc1, 0x58,
	0x86, 0xcf, 0x7f, 0xe4, 0x3a, 0x8c, 0xc7, 0xe8, 0x07, 0x05, 0xce, 0xe1, 0xee, 0x41, 0xe8, 0xaf,
	0x3d, 0xd3, 0x1e, 0xcc, 0x72, 0x63, 0xd3, 0x37, 0xa1, 0x52, 0x92, 0xc6, 0xaa, 0x33, 0xa5, 0xb1,
	0x50, 0x2d, 0x35, 0x51, 0xb5, 0xa8, 0x05, 0xab, 0x69, 0xbe, 0xa5, 0x29, 0xfb, 0x10, 0xd6, 0x92,
	0x3d, 0x87, 0x76, 0x4f, 0xb0, 0xf2, 0x8f, 0xd4, 0x8d, 0x5d, 0xd0, 0xb2, 0xc7, 0x96, 0x92, 0xf9,
	0x4d, 0x81, 0xc5, 0x38, 0x6d, 0xa6, 0x72, 0x9b, 0x92, 0x29, 0x14, 0x2b, 0x30, 0x87, 0xdb, 0xb8,
	0xb3, 0xcf, 0xc4, 0xb4, 0x84, 0xf9, 0x40, 0x5d, 0x86, 0xea, 0x11, 0xe1, 0xee, 0xae, 0x60, 0xfa,
	0x49, 0xd7, 0x79, 0xbe, 0xe1, 0xfa, 0x61, 0x25, 0xe1, 0x03, 0xba, 0x8e, 0xd8, 0x83, 0x30, 0x4b,
	0xd0, 0x4f, 0xaa, 0x05, 0xd3, 0xf6, 0x89, 0xfb, 0xc8, 0xb0, 0xc2, 0xfa, 0x10, 0x8f, 0xa9, 0xcd,
	0xd1, 0xf7, 0xa1, 0x6d, 0xfa, 0xac, 0x4a, 0x2c, 0x61, 0x69, 0x4e, 0xf0, 0xd7, 0x82, 0xe4, 0xaf,
	0xa8, 0x82, 0x2c, 0x0a, 0x15, 0x44, 0x85, 0x9a, 0x4d, 0xef, 0x01, 0x30, 0x78, 0xf6, 0x8d, 0x9e,
	0x29, 0xb0, 0x8c, 0xdb, 0x58, 0x2e, 0xde, 0x65, 0x4e, 0x98, 0x26, 0x99, 0xe6, 0x3b, 0x6a, 0x02,
	0x5d, 0x74, 0x05, 0xce, 0x08, 0x2c, 0x4a, 0x63, 0xf6, 0x21, 0xad, 0x02, 0x6d, 0x2c, 0x55, 0xb4,
	0x18, 0x50, 0x11, 0x01, 0xd3, 0x54, 0x6b, 0x39, 0x54, 0xcb, 0x9a, 0x83, 0x84, 0x74, 0x55, 0x22,
	0xfd, 0x80, 0xb9, 0x6e, 0xda, 0x42, 0xd7, 0x82, 0x79, 0x97, 0x69, 0x2c, 0x2a, 0x75, 0x93, 0x6b,
	0x77, 0xb4, 0x10, 0x7d, 0x52, 0x61, 0x10, 0x72, 0xe6, 0x7f, 0x3e, 0x89, 0xa6, 0x1d, 0xb1, 0x98,
	0xe3, 0x88, 0xbf, 0xa5, 0x8c, 0x33, 0x92, 0xe5, 0x5a, 0x99, 0x9c, 0x99, 0x53, 0x5a, 0xf9, 0x96,
	0xfb, 0x50, 0x6e, 0x19, 0x56, 0x60, 0xce, 0xed, 0xbb, 0x9d, 0x7d, 0xad, 0xce, 0x7d, 0xc4, 0x06,
	0x53, 0xa5, 0xd8, 0xbf, 0xce, 0x47, 0x72, 0xdc, 0xe7, 0x0b, 0x64, 0xfa, 0x7c, 0xa9, 0xe0, 0x3b,
	0x5a, 0x7a, 0xda, 0x78, 0xcf, 0xf0, 0xfb, 0xc7, 0x99, 0x06, 0xab, 0xd4, 0x2f, 0xcf, 0x79, 0x89,
	0xd4, 0x1b, 0x30, 0xe7, 0xb2, 0x86, 0xb6, 0xc6, 0x2e, 0xc5, 0xc5, 0xec, 0xa5, 0x90, 0xb8, 0x60,
	0xbe, 0x9a, 0x95, 0x9d, 0x14, 0xd7, 0x52, 0x25, 0x74, 0x98, 0x70, 0xa6, 0x5d, 0xce, 0xfa, 0x3a,
	0xd2, 0x77, 0x06, 0x24, 0xb6, 0x27, 0x1e, 0xa3, 0xaf, 0x15, 0x58, 0xc7, 0xdd, 0x03, 0xd7, 0xb0,
	0x3d, 0xa3, 0x4f, 0xeb, 0xe3, 0x1e, 0x19, 0x9a, 0xf6, 0x8b, 0x68, 0xae, 0x3b, 0x70, 0x9a, 0x7e,
	0xb5, 0x85, 0x56, 0xbf, 0x3a, 0x9d, 0x67, 0xd2, 0xfb, 0x68, 0x6e, 0x6f, 0xe4, 0x91, 0x2c, 0xb5,
	0x7c, 0x1b, 0x96, 0xfc, 0x64, 0x57, 0x4c, 0x51, 0x9e, 0x94, 0x75, 0x5f, 0x13, 0x74, 0x4f, 0xef,
	0x47, 0x2d, 0xbe, 0x1f, 0xe8, 0x29, 0x9c, 0x97, 0x58, 0x74, 0x03, 0x6f, 0x4c, 0x66, 0xeb, 0x6b,
	0x26, 0x39, 0x2b, 0x43, 0xb4, 0x9a, 0x43, 0x14, 0xdd, 0x84, 0x8d, 0x7c, 0x02, 0xa5, 0x8a, 0xf9,
	0x42, 0x61, 0x9d, 0x4a, 0xb2, 0xf5, 0xee, 0x9f, 0xc8, 0x3b, 0x75, 0xa5, 0x6a, 0x99, 0x77, 0x16,
	0xef, 0x77, 0x52, 0xe4, 0x4a, 0x6d, 0xfa, 0xb1, 0x02, 0xff, 0x91, 0xb6, 0x85, 0x2a, 0x72, 0x9c,
	0xd1, 0x3d, 0x32, 0xd3, 0x95, 0xff, 0xe7, 0xa5, 0xc2, 0x8c, 0xdf, 0x17, 0xf3, 0xfc, 0x1e, 0x25,
	0x4c, 0x48, 0x12, 0x26, 0x7a, 0x19, 0x50, 0x91, 0xd3, 0x4a, 0xbd, 0xfe, 0x93, 0x02, 0x5b, 0xd2,
	0x01, 0xbc, 0x6d, 0x98, 0xdd, 0xe9, 0xd3, 0x99, 0xd0, 0x82, 0x15, 0x61, 0x22, 0x84, 0x89, 0x65,
	0x98, 0xfb, 0xdb, 0xc4, 0xde, 0xec, 0x99, 0x92, 0x12, 0x8c, 0x4c, 0xbd, 0x34, 0x9b, 0xdc, 0xe5,
	0x4f, 0xb0, 0x7b, 0x84, 0x44, 0x9d, 0xcf, 0xff, 0x32, 0x0f, 0x8e, 0x83, 0x0c, 0xa1, 0xb0, 0x15,
	0x8a, 0xb7, 0xa2, 0x2f, 0xab, 0xa9, 0x6c, 0x26, 0x2d, 0x9c, 0x68, 0xb1, 0x52, 0x60, 0x71, 0x56,
	0xc0, 0x9b, 0x00, 0x7d, 0x16, 0xd9, 0x03, 0x73, 0x44, 0xb4, 0x93, 0x5c, 0x58, 0xc9, 0x0c, 0xb5,
	0x92, 0xd8, 0x03, 0xf6, 0xe3, 0x12, 0xfb, 0x31, 0x1a, 0xaa, 0x97, 0xe0, 0xd4, 0x11, 0x21, 0xf7,
	0x89, 0xdb, 0x89, 0x84, 0x5d, 0x67, 0xc7, 0xa6, 0x66, 0xff, 0xbd, 0x57, 0xa4, 0xf5, 0xcd, 0x69,
	0xa8, 0x53, 0xdf, 0x76, 0x89, 0xfb, 0xc8, 0xec, 0x13, 0xd5, 0x49, 0x1e, 0xa3, 0xf4, 0x5d, 0xa8,
	0x6e, 0x67, 0xa3, 0x9e, 0x7d, 0xe6, 0x36, 0xa2, 0xc7, 0x68, 0xfc, 0xc7, 0x63, 0x33, 0x92, 0x18,
	0xda, 0xfc, 0xe0, 0xe7, 0x5f, 0x3e, 0xad, 0x68, 0xe8, 0xac, 0x4e, 0xb9, 0xea, 0xd1, 0xe1, 0x3a,
	0x7d, 0xe8, 0xdd, 0x52, 0x2e, 0xab, 0x01, 0x9c, 0xf2, 0xa5, 0xd7, 0x9f, 0x7a, 0x69, 0x22, 0xa4,
	0xf4, 0xea, 0x2c, 0x02, 0xdd, 0x62, 0xa0, 0x0d, 0x74, 0x2e, 0x05, 0x1a, 0xd8, 0x11, 0xec, 0x83,
	0x48, 0x33, 0x14, 0x45, 0xdd, 0xcc, 0x40, 0x4a, 0x55, 0xba, 0x08, 0x6a, 0x8d, 0x41, 0x9d, 0x41,
	0x27, 0x39, 0x14, 0x3f, 0x34, 0x44, 0x08, 0x78, 0xbb, 0x9b, 0x8f, 0x20, 0xbd, 0x0f, 0x66, 0x40,
	0xe0, 0x87, 0x52, 0x04, 0x13, 0x60, 0xc0, 0x1f, 0x5f, 0xf9, 0x08, 0xd2, 0xfb, 0x70, 0x0a, 0x77,
	0x35, 0x42, 0x77, 0xf1, 0x43, 0xf5, 0xf7, 0xb8, 0xb8, 0xde, 0xa7, 0x50, 0x6f, 0xc1, 0xe2, 0xc3,
	0x28, 0x81, 0xa8, 0x17, 0x32, 0x48, 0xe2, 0x9b, 0xae, 0x08, 0x68, 0x95, 0x01, 0x2d, 0xa3, 0x3a,
	0x07, 0x62, 0x47, 0xd2, 0xe3, 0x1f, 0xc3, 0x4a, 0x12, 0x8d, 0xa4, 0x1b, 0x52, 0xcb, 0xda, 0xa7,
	0x22, 0xac, 0xff, 0x32, 0xac, 0x0b, 0x48, 0x0b, 0x03, 0xc3, 0x4e, 0x7d, 0x9b, 0x36, 0xa2, 0x42,
	0x90, 0x3e, 0x56, 0x60, 0xbd, 0x27, 0xf4, 0xa3, 0x32, 0xfc, 0x76, 0x16, 0x3e, 0xdb, 0x68, 0x17,
	0x71, 0xd8, 0x61, 0x1c, 0x10, 0xba, 0x90, 0xe5, 0x20, 0xa0, 0x86, 0x1e, 0x48, 0xd4, 0x52, 0xec,
	0x81, 0xa9, 0x85, 0x53, 0xe0, 0x81, 0x44, 0x44, 0x3e, 0x9c, 0x8d, 0x23, 0x2b, 0xe0, 0x6e, 0x66,
	0x71, 0xa7, 0x0d, 0x32, 0x62, 0xb0, 0x1b, 0x68, 0x2d, 0x0b, 0x2b, 0x06, 0x3c, 0x91, 0x6e, 0xb1,
	0xb9, 0x53, 0xab, 0xb8, 0xc0, 0x5c, 0x8e, 0x45, 0x81, 0x9f, 0xc2, 0x0a, 0xfd, 0x35, 0xdd, 0x5f,
	0xab, 0x3b, 0x45, 0xd5, 0x4d, 0x7c, 0x27, 0xcc, 0x60, 0xb9, 0x90, 0x7d, 0xf5, 0x1e, 0x3d, 0x82,
	0x12, 0xf8, 0x48, 0x81, 0xd5, 0x14, 0x83, 0xb0, 0xb5, 0x55, 0x2f, 0x17, 0x71, 0x90, 0x1b, 0xf0,
	0x22, 0x16, 0xdb, 0x8c, 0xc5, 0x26, 0x5a, 0xcf, 0xb2, 0xf0, 0xf8, 0x21, 0x94, 0xc7, 0x13, 0x50,
	0x53, 0x34, 0xee, 0xe6, 0xe7, 0xde, 0xbc, 0x3e, 0x7a, 0x96, 0xdc, 0x2b, 0xc0, 0x87, 0xd0, 0x9f,
	0x2b, 0xb0, 0x91, 0xc2, 0x96, 0x3a, 0x33, 0xf5, 0x6a, 0x11, 0x8b, 0xbc, 0xce, 0xb7, 0x88, 0xcf,
	0x65, 0xc6, 0x67, 0x1b, 0x5d, 0xcc, 0xf2, 0xe9, 0x8b, 0x47, 0x51, 0x66, 0x9f, 0x29, 0x70, 0x3e,
	0xc5, 0x4c, 0xec, 0x9b, 0x54, 0xbd, 0x88, 0x58, 0x4e, 0x73, 0xf8, 0x82, 0x78, 0xf5, 0x4e, 0xb0,
	0xbf, 0xbd, 0xaf, 0xff, 0x1e, 0x00, 0x00, 0xff, 0xff, 0x29, 0x7f, 0x7b, 0x26, 0x6b, 0x1c, 0x00,
	0x00,
}
