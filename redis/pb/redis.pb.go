// Code generated by protoc-gen-go. DO NOT EDIT.
// source: redis.proto

/*
Package Aphro_Redis_pb is a generated protocol buffer package.

It is generated from these files:
	redis.proto

It has these top-level messages:
	QueryRedisRequest
	QueryRedisResponse
	UpdateRedisRequest
	UpdateRedisResponse
	DeleteRedisRequest
	DeleteRedisResponse
	InsertRedisRequest
	InsertRedisResponse
*/
package Aphro_Redis_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueryRedisRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *QueryRedisRequest) Reset()                    { *m = QueryRedisRequest{} }
func (m *QueryRedisRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRedisRequest) ProtoMessage()               {}
func (*QueryRedisRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QueryRedisRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type QueryRedisResponse struct {
	Successed bool   `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
	Key       string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value     string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Ttl       uint32 `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *QueryRedisResponse) Reset()                    { *m = QueryRedisResponse{} }
func (m *QueryRedisResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryRedisResponse) ProtoMessage()               {}
func (*QueryRedisResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QueryRedisResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

func (m *QueryRedisResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *QueryRedisResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *QueryRedisResponse) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type UpdateRedisRequest struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Ttl   string `protobuf:"bytes,3,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *UpdateRedisRequest) Reset()                    { *m = UpdateRedisRequest{} }
func (m *UpdateRedisRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRedisRequest) ProtoMessage()               {}
func (*UpdateRedisRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdateRedisRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UpdateRedisRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdateRedisRequest) GetTtl() string {
	if m != nil {
		return m.Ttl
	}
	return ""
}

type UpdateRedisResponse struct {
	Successed bool   `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
	Key       string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value     string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Ttl       uint32 `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *UpdateRedisResponse) Reset()                    { *m = UpdateRedisResponse{} }
func (m *UpdateRedisResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateRedisResponse) ProtoMessage()               {}
func (*UpdateRedisResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateRedisResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

func (m *UpdateRedisResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UpdateRedisResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdateRedisResponse) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type DeleteRedisRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *DeleteRedisRequest) Reset()                    { *m = DeleteRedisRequest{} }
func (m *DeleteRedisRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRedisRequest) ProtoMessage()               {}
func (*DeleteRedisRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeleteRedisRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DeleteRedisResponse struct {
	Successed bool `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
}

func (m *DeleteRedisResponse) Reset()                    { *m = DeleteRedisResponse{} }
func (m *DeleteRedisResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteRedisResponse) ProtoMessage()               {}
func (*DeleteRedisResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteRedisResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

type InsertRedisRequest struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Ttl   uint32 `protobuf:"varint,3,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *InsertRedisRequest) Reset()                    { *m = InsertRedisRequest{} }
func (m *InsertRedisRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertRedisRequest) ProtoMessage()               {}
func (*InsertRedisRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *InsertRedisRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *InsertRedisRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *InsertRedisRequest) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type InsertRedisResponse struct {
	Successed bool   `protobuf:"varint,1,opt,name=successed" json:"successed,omitempty"`
	Key       string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value     string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Ttl       uint32 `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *InsertRedisResponse) Reset()                    { *m = InsertRedisResponse{} }
func (m *InsertRedisResponse) String() string            { return proto.CompactTextString(m) }
func (*InsertRedisResponse) ProtoMessage()               {}
func (*InsertRedisResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *InsertRedisResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

func (m *InsertRedisResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *InsertRedisResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *InsertRedisResponse) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryRedisRequest)(nil), "Aphro.Redis.pb.queryRedisRequest")
	proto.RegisterType((*QueryRedisResponse)(nil), "Aphro.Redis.pb.queryRedisResponse")
	proto.RegisterType((*UpdateRedisRequest)(nil), "Aphro.Redis.pb.updateRedisRequest")
	proto.RegisterType((*UpdateRedisResponse)(nil), "Aphro.Redis.pb.updateRedisResponse")
	proto.RegisterType((*DeleteRedisRequest)(nil), "Aphro.Redis.pb.deleteRedisRequest")
	proto.RegisterType((*DeleteRedisResponse)(nil), "Aphro.Redis.pb.deleteRedisResponse")
	proto.RegisterType((*InsertRedisRequest)(nil), "Aphro.Redis.pb.insertRedisRequest")
	proto.RegisterType((*InsertRedisResponse)(nil), "Aphro.Redis.pb.insertRedisResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RedisService service

type RedisServiceClient interface {
	Query(ctx context.Context, in *QueryRedisRequest, opts ...grpc.CallOption) (*QueryRedisResponse, error)
	Update(ctx context.Context, in *UpdateRedisRequest, opts ...grpc.CallOption) (*UpdateRedisResponse, error)
	Delete(ctx context.Context, in *DeleteRedisRequest, opts ...grpc.CallOption) (*DeleteRedisResponse, error)
	Insert(ctx context.Context, in *InsertRedisRequest, opts ...grpc.CallOption) (*InsertRedisResponse, error)
}

type redisServiceClient struct {
	cc *grpc.ClientConn
}

func NewRedisServiceClient(cc *grpc.ClientConn) RedisServiceClient {
	return &redisServiceClient{cc}
}

func (c *redisServiceClient) Query(ctx context.Context, in *QueryRedisRequest, opts ...grpc.CallOption) (*QueryRedisResponse, error) {
	out := new(QueryRedisResponse)
	err := grpc.Invoke(ctx, "/Aphro.Redis.pb.RedisService/query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisServiceClient) Update(ctx context.Context, in *UpdateRedisRequest, opts ...grpc.CallOption) (*UpdateRedisResponse, error) {
	out := new(UpdateRedisResponse)
	err := grpc.Invoke(ctx, "/Aphro.Redis.pb.RedisService/update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisServiceClient) Delete(ctx context.Context, in *DeleteRedisRequest, opts ...grpc.CallOption) (*DeleteRedisResponse, error) {
	out := new(DeleteRedisResponse)
	err := grpc.Invoke(ctx, "/Aphro.Redis.pb.RedisService/delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisServiceClient) Insert(ctx context.Context, in *InsertRedisRequest, opts ...grpc.CallOption) (*InsertRedisResponse, error) {
	out := new(InsertRedisResponse)
	err := grpc.Invoke(ctx, "/Aphro.Redis.pb.RedisService/insert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RedisService service

type RedisServiceServer interface {
	Query(context.Context, *QueryRedisRequest) (*QueryRedisResponse, error)
	Update(context.Context, *UpdateRedisRequest) (*UpdateRedisResponse, error)
	Delete(context.Context, *DeleteRedisRequest) (*DeleteRedisResponse, error)
	Insert(context.Context, *InsertRedisRequest) (*InsertRedisResponse, error)
}

func RegisterRedisServiceServer(s *grpc.Server, srv RedisServiceServer) {
	s.RegisterService(&_RedisService_serviceDesc, srv)
}

func _RedisService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Redis.pb.RedisService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).Query(ctx, req.(*QueryRedisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRedisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Redis.pb.RedisService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).Update(ctx, req.(*UpdateRedisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRedisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Redis.pb.RedisService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).Delete(ctx, req.(*DeleteRedisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRedisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Redis.pb.RedisService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).Insert(ctx, req.(*InsertRedisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RedisService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Aphro.Redis.pb.RedisService",
	HandlerType: (*RedisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "query",
			Handler:    _RedisService_Query_Handler,
		},
		{
			MethodName: "update",
			Handler:    _RedisService_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _RedisService_Delete_Handler,
		},
		{
			MethodName: "insert",
			Handler:    _RedisService_Insert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redis.proto",
}

func init() { proto.RegisterFile("redis.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xdd, 0x4e, 0xc2, 0x40,
	0x10, 0x85, 0xa1, 0x08, 0x91, 0x51, 0x8c, 0x0e, 0x5e, 0x34, 0x0d, 0x17, 0xb8, 0x46, 0xc3, 0x55,
	0x49, 0xe4, 0x09, 0x7c, 0x01, 0x63, 0xca, 0x13, 0x94, 0x76, 0x82, 0x8d, 0xb5, 0x5b, 0xf6, 0x87,
	0x84, 0xa7, 0xf5, 0x55, 0x4c, 0x77, 0x15, 0x68, 0xb6, 0xa9, 0x26, 0x86, 0xbb, 0xed, 0xe4, 0xe4,
	0x9b, 0x93, 0x73, 0xa6, 0x70, 0x21, 0x28, 0xcd, 0x64, 0x58, 0x0a, 0xae, 0x38, 0x5e, 0x3d, 0x97,
	0x6f, 0x82, 0x87, 0x91, 0x1d, 0xad, 0x82, 0xc9, 0x9a, 0xf3, 0x75, 0x4e, 0xf3, 0xb8, 0xcc, 0xe6,
	0x71, 0x51, 0x70, 0x15, 0xab, 0x8c, 0x17, 0xdf, 0x6a, 0xf6, 0x00, 0x37, 0x1b, 0x4d, 0x62, 0x67,
	0xe4, 0x11, 0x6d, 0x34, 0x49, 0x85, 0xd7, 0xd0, 0x7b, 0xa7, 0x9d, 0xdf, 0x9d, 0x76, 0x67, 0xc3,
	0xa8, 0x7a, 0xb2, 0x1c, 0xf0, 0x58, 0x26, 0x4b, 0x5e, 0x48, 0xc2, 0x09, 0x0c, 0xa5, 0x4e, 0x12,
	0x92, 0x92, 0x52, 0xa3, 0x3e, 0x8f, 0x0e, 0x83, 0x1f, 0x8a, 0xb7, 0xa7, 0xe0, 0x2d, 0xf4, 0xb7,
	0x71, 0xae, 0xc9, 0xef, 0x99, 0x99, 0xfd, 0xa8, 0x74, 0x4a, 0xe5, 0xfe, 0xd9, 0xb4, 0x3b, 0x1b,
	0x45, 0xd5, 0x93, 0xbd, 0x00, 0xea, 0x32, 0x8d, 0x15, 0xb5, 0xbb, 0x3a, 0xf0, 0xbc, 0x06, 0x9e,
	0xdd, 0x61, 0x78, 0x1f, 0x30, 0xae, 0xf1, 0x4e, 0x6c, 0xff, 0x11, 0x30, 0xa5, 0x9c, 0x7e, 0xb3,
	0xcf, 0x16, 0x30, 0xae, 0xe9, 0xfe, 0x62, 0xab, 0xca, 0x26, 0x2b, 0x24, 0x09, 0xf5, 0xdf, 0x6c,
	0x46, 0xfb, 0x6c, 0x6a, 0xbc, 0xd3, 0x66, 0xf3, 0xf4, 0xe9, 0xc1, 0xa5, 0xd9, 0xb4, 0x24, 0xb1,
	0xcd, 0x12, 0xc2, 0x57, 0xe8, 0x9b, 0xcb, 0xc2, 0xbb, 0xb0, 0x7e, 0xb8, 0xa1, 0x73, 0x97, 0x01,
	0x6b, 0x93, 0x58, 0xe3, 0xac, 0x83, 0x4b, 0x18, 0xd8, 0xb6, 0xd1, 0xd1, 0xbb, 0x57, 0x15, 0xdc,
	0xb7, 0x6a, 0x8e, 0xa1, 0xb6, 0x2b, 0x17, 0xea, 0x76, 0xed, 0x42, 0x1b, 0x7a, 0xb6, 0x50, 0x9b,
	0xbd, 0x0b, 0x75, 0x3b, 0x76, 0xa1, 0x0d, 0xbd, 0xb1, 0xce, 0x6a, 0x60, 0x7e, 0xec, 0xc5, 0x57,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x2d, 0xd4, 0x21, 0x15, 0x04, 0x00, 0x00,
}
