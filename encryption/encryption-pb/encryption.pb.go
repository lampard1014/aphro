// Code generated by protoc-gen-go. DO NOT EDIT.
// source: encryption.proto

/*
Package Aphro_Encryption_pb is a generated protocol buffer package.

It is generated from these files:
	encryption.proto

It has these top-level messages:
	EncryptionBase64DecodeRequest
	EncryptionBase64DecodeResponse
	EncryptionBase64EncodeRequest
	EncryptionBase64EncodeResponse
	EncryptionXXTEARequest
	EncryptionXXTEAResponse
	DecryptionXXTEARequest
	DecryptionXXTEAResponse
	EncryptionRSARequest
	EncryptionRSAResponse
	DecryptionRSARequest
	DecryptionRSAResponse
*/
package Aphro_Encryption_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EncryptionBase64DecodeRequest struct {
	DecodedStr string `protobuf:"bytes,1,opt,name=decodedStr" json:"decodedStr,omitempty"`
}

func (m *EncryptionBase64DecodeRequest) Reset()                    { *m = EncryptionBase64DecodeRequest{} }
func (m *EncryptionBase64DecodeRequest) String() string            { return proto.CompactTextString(m) }
func (*EncryptionBase64DecodeRequest) ProtoMessage()               {}
func (*EncryptionBase64DecodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EncryptionBase64DecodeRequest) GetDecodedStr() string {
	if m != nil {
		return m.DecodedStr
	}
	return ""
}

type EncryptionBase64DecodeResponse struct {
	RawValue []byte `protobuf:"bytes,1,opt,name=rawValue,proto3" json:"rawValue,omitempty"`
}

func (m *EncryptionBase64DecodeResponse) Reset()                    { *m = EncryptionBase64DecodeResponse{} }
func (m *EncryptionBase64DecodeResponse) String() string            { return proto.CompactTextString(m) }
func (*EncryptionBase64DecodeResponse) ProtoMessage()               {}
func (*EncryptionBase64DecodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EncryptionBase64DecodeResponse) GetRawValue() []byte {
	if m != nil {
		return m.RawValue
	}
	return nil
}

type EncryptionBase64EncodeRequest struct {
	RawValue []byte `protobuf:"bytes,1,opt,name=rawValue,proto3" json:"rawValue,omitempty"`
}

func (m *EncryptionBase64EncodeRequest) Reset()                    { *m = EncryptionBase64EncodeRequest{} }
func (m *EncryptionBase64EncodeRequest) String() string            { return proto.CompactTextString(m) }
func (*EncryptionBase64EncodeRequest) ProtoMessage()               {}
func (*EncryptionBase64EncodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EncryptionBase64EncodeRequest) GetRawValue() []byte {
	if m != nil {
		return m.RawValue
	}
	return nil
}

type EncryptionBase64EncodeResponse struct {
	EncodedStr string `protobuf:"bytes,1,opt,name=encodedStr" json:"encodedStr,omitempty"`
}

func (m *EncryptionBase64EncodeResponse) Reset()                    { *m = EncryptionBase64EncodeResponse{} }
func (m *EncryptionBase64EncodeResponse) String() string            { return proto.CompactTextString(m) }
func (*EncryptionBase64EncodeResponse) ProtoMessage()               {}
func (*EncryptionBase64EncodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EncryptionBase64EncodeResponse) GetEncodedStr() string {
	if m != nil {
		return m.EncodedStr
	}
	return ""
}

// /////////////// XXTEA /////////////////////
type EncryptionXXTEARequest struct {
	Key      string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	RawValue string `protobuf:"bytes,2,opt,name=rawValue" json:"rawValue,omitempty"`
}

func (m *EncryptionXXTEARequest) Reset()                    { *m = EncryptionXXTEARequest{} }
func (m *EncryptionXXTEARequest) String() string            { return proto.CompactTextString(m) }
func (*EncryptionXXTEARequest) ProtoMessage()               {}
func (*EncryptionXXTEARequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EncryptionXXTEARequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *EncryptionXXTEARequest) GetRawValue() string {
	if m != nil {
		return m.RawValue
	}
	return ""
}

type EncryptionXXTEAResponse struct {
	Key          string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	EncryptedStr []byte `protobuf:"bytes,2,opt,name=encryptedStr,proto3" json:"encryptedStr,omitempty"`
}

func (m *EncryptionXXTEAResponse) Reset()                    { *m = EncryptionXXTEAResponse{} }
func (m *EncryptionXXTEAResponse) String() string            { return proto.CompactTextString(m) }
func (*EncryptionXXTEAResponse) ProtoMessage()               {}
func (*EncryptionXXTEAResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EncryptionXXTEAResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *EncryptionXXTEAResponse) GetEncryptedStr() []byte {
	if m != nil {
		return m.EncryptedStr
	}
	return nil
}

type DecryptionXXTEARequest struct {
	Key          string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	EncryptedStr []byte `protobuf:"bytes,2,opt,name=encryptedStr,proto3" json:"encryptedStr,omitempty"`
}

func (m *DecryptionXXTEARequest) Reset()                    { *m = DecryptionXXTEARequest{} }
func (m *DecryptionXXTEARequest) String() string            { return proto.CompactTextString(m) }
func (*DecryptionXXTEARequest) ProtoMessage()               {}
func (*DecryptionXXTEARequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DecryptionXXTEARequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DecryptionXXTEARequest) GetEncryptedStr() []byte {
	if m != nil {
		return m.EncryptedStr
	}
	return nil
}

type DecryptionXXTEAResponse struct {
	Key      string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	RawValue string `protobuf:"bytes,2,opt,name=rawValue" json:"rawValue,omitempty"`
}

func (m *DecryptionXXTEAResponse) Reset()                    { *m = DecryptionXXTEAResponse{} }
func (m *DecryptionXXTEAResponse) String() string            { return proto.CompactTextString(m) }
func (*DecryptionXXTEAResponse) ProtoMessage()               {}
func (*DecryptionXXTEAResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DecryptionXXTEAResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DecryptionXXTEAResponse) GetRawValue() string {
	if m != nil {
		return m.RawValue
	}
	return ""
}

// //////////////RSA //////////////////////
type EncryptionRSARequest struct {
	RawValue []byte `protobuf:"bytes,1,opt,name=rawValue,proto3" json:"rawValue,omitempty"`
}

func (m *EncryptionRSARequest) Reset()                    { *m = EncryptionRSARequest{} }
func (m *EncryptionRSARequest) String() string            { return proto.CompactTextString(m) }
func (*EncryptionRSARequest) ProtoMessage()               {}
func (*EncryptionRSARequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *EncryptionRSARequest) GetRawValue() []byte {
	if m != nil {
		return m.RawValue
	}
	return nil
}

type EncryptionRSAResponse struct {
	EncryptedStr []byte `protobuf:"bytes,1,opt,name=encryptedStr,proto3" json:"encryptedStr,omitempty"`
}

func (m *EncryptionRSAResponse) Reset()                    { *m = EncryptionRSAResponse{} }
func (m *EncryptionRSAResponse) String() string            { return proto.CompactTextString(m) }
func (*EncryptionRSAResponse) ProtoMessage()               {}
func (*EncryptionRSAResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *EncryptionRSAResponse) GetEncryptedStr() []byte {
	if m != nil {
		return m.EncryptedStr
	}
	return nil
}

type DecryptionRSARequest struct {
	EncryptedStr []byte `protobuf:"bytes,1,opt,name=encryptedStr,proto3" json:"encryptedStr,omitempty"`
}

func (m *DecryptionRSARequest) Reset()                    { *m = DecryptionRSARequest{} }
func (m *DecryptionRSARequest) String() string            { return proto.CompactTextString(m) }
func (*DecryptionRSARequest) ProtoMessage()               {}
func (*DecryptionRSARequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DecryptionRSARequest) GetEncryptedStr() []byte {
	if m != nil {
		return m.EncryptedStr
	}
	return nil
}

type DecryptionRSAResponse struct {
	RawValue []byte `protobuf:"bytes,1,opt,name=rawValue,proto3" json:"rawValue,omitempty"`
}

func (m *DecryptionRSAResponse) Reset()                    { *m = DecryptionRSAResponse{} }
func (m *DecryptionRSAResponse) String() string            { return proto.CompactTextString(m) }
func (*DecryptionRSAResponse) ProtoMessage()               {}
func (*DecryptionRSAResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DecryptionRSAResponse) GetRawValue() []byte {
	if m != nil {
		return m.RawValue
	}
	return nil
}

func init() {
	proto.RegisterType((*EncryptionBase64DecodeRequest)(nil), "Aphro.Encryption.pb.EncryptionBase64DecodeRequest")
	proto.RegisterType((*EncryptionBase64DecodeResponse)(nil), "Aphro.Encryption.pb.EncryptionBase64DecodeResponse")
	proto.RegisterType((*EncryptionBase64EncodeRequest)(nil), "Aphro.Encryption.pb.EncryptionBase64EncodeRequest")
	proto.RegisterType((*EncryptionBase64EncodeResponse)(nil), "Aphro.Encryption.pb.EncryptionBase64EncodeResponse")
	proto.RegisterType((*EncryptionXXTEARequest)(nil), "Aphro.Encryption.pb.EncryptionXXTEARequest")
	proto.RegisterType((*EncryptionXXTEAResponse)(nil), "Aphro.Encryption.pb.EncryptionXXTEAResponse")
	proto.RegisterType((*DecryptionXXTEARequest)(nil), "Aphro.Encryption.pb.DecryptionXXTEARequest")
	proto.RegisterType((*DecryptionXXTEAResponse)(nil), "Aphro.Encryption.pb.DecryptionXXTEAResponse")
	proto.RegisterType((*EncryptionRSARequest)(nil), "Aphro.Encryption.pb.EncryptionRSARequest")
	proto.RegisterType((*EncryptionRSAResponse)(nil), "Aphro.Encryption.pb.EncryptionRSAResponse")
	proto.RegisterType((*DecryptionRSARequest)(nil), "Aphro.Encryption.pb.DecryptionRSARequest")
	proto.RegisterType((*DecryptionRSAResponse)(nil), "Aphro.Encryption.pb.DecryptionRSAResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EncryptionService service

type EncryptionServiceClient interface {
	Base64Encode(ctx context.Context, in *EncryptionBase64EncodeRequest, opts ...grpc.CallOption) (*EncryptionBase64EncodeResponse, error)
	Base64Decode(ctx context.Context, in *EncryptionBase64DecodeRequest, opts ...grpc.CallOption) (*EncryptionBase64DecodeResponse, error)
	XxteaEncryption(ctx context.Context, in *EncryptionXXTEARequest, opts ...grpc.CallOption) (*EncryptionXXTEAResponse, error)
	XxteaDecryption(ctx context.Context, in *DecryptionXXTEARequest, opts ...grpc.CallOption) (*DecryptionXXTEAResponse, error)
	RsaEncryption(ctx context.Context, in *EncryptionRSARequest, opts ...grpc.CallOption) (*EncryptionRSAResponse, error)
	RsaDecryption(ctx context.Context, in *DecryptionRSARequest, opts ...grpc.CallOption) (*DecryptionRSAResponse, error)
}

type encryptionServiceClient struct {
	cc *grpc.ClientConn
}

func NewEncryptionServiceClient(cc *grpc.ClientConn) EncryptionServiceClient {
	return &encryptionServiceClient{cc}
}

func (c *encryptionServiceClient) Base64Encode(ctx context.Context, in *EncryptionBase64EncodeRequest, opts ...grpc.CallOption) (*EncryptionBase64EncodeResponse, error) {
	out := new(EncryptionBase64EncodeResponse)
	err := grpc.Invoke(ctx, "/Aphro.Encryption.pb.EncryptionService/base64Encode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) Base64Decode(ctx context.Context, in *EncryptionBase64DecodeRequest, opts ...grpc.CallOption) (*EncryptionBase64DecodeResponse, error) {
	out := new(EncryptionBase64DecodeResponse)
	err := grpc.Invoke(ctx, "/Aphro.Encryption.pb.EncryptionService/base64Decode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) XxteaEncryption(ctx context.Context, in *EncryptionXXTEARequest, opts ...grpc.CallOption) (*EncryptionXXTEAResponse, error) {
	out := new(EncryptionXXTEAResponse)
	err := grpc.Invoke(ctx, "/Aphro.Encryption.pb.EncryptionService/xxteaEncryption", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) XxteaDecryption(ctx context.Context, in *DecryptionXXTEARequest, opts ...grpc.CallOption) (*DecryptionXXTEAResponse, error) {
	out := new(DecryptionXXTEAResponse)
	err := grpc.Invoke(ctx, "/Aphro.Encryption.pb.EncryptionService/xxteaDecryption", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) RsaEncryption(ctx context.Context, in *EncryptionRSARequest, opts ...grpc.CallOption) (*EncryptionRSAResponse, error) {
	out := new(EncryptionRSAResponse)
	err := grpc.Invoke(ctx, "/Aphro.Encryption.pb.EncryptionService/rsaEncryption", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) RsaDecryption(ctx context.Context, in *DecryptionRSARequest, opts ...grpc.CallOption) (*DecryptionRSAResponse, error) {
	out := new(DecryptionRSAResponse)
	err := grpc.Invoke(ctx, "/Aphro.Encryption.pb.EncryptionService/rsaDecryption", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EncryptionService service

type EncryptionServiceServer interface {
	Base64Encode(context.Context, *EncryptionBase64EncodeRequest) (*EncryptionBase64EncodeResponse, error)
	Base64Decode(context.Context, *EncryptionBase64DecodeRequest) (*EncryptionBase64DecodeResponse, error)
	XxteaEncryption(context.Context, *EncryptionXXTEARequest) (*EncryptionXXTEAResponse, error)
	XxteaDecryption(context.Context, *DecryptionXXTEARequest) (*DecryptionXXTEAResponse, error)
	RsaEncryption(context.Context, *EncryptionRSARequest) (*EncryptionRSAResponse, error)
	RsaDecryption(context.Context, *DecryptionRSARequest) (*DecryptionRSAResponse, error)
}

func RegisterEncryptionServiceServer(s *grpc.Server, srv EncryptionServiceServer) {
	s.RegisterService(&_EncryptionService_serviceDesc, srv)
}

func _EncryptionService_Base64Encode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptionBase64EncodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).Base64Encode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Encryption.pb.EncryptionService/Base64Encode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).Base64Encode(ctx, req.(*EncryptionBase64EncodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_Base64Decode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptionBase64DecodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).Base64Decode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Encryption.pb.EncryptionService/Base64Decode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).Base64Decode(ctx, req.(*EncryptionBase64DecodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_XxteaEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptionXXTEARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).XxteaEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Encryption.pb.EncryptionService/XxteaEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).XxteaEncryption(ctx, req.(*EncryptionXXTEARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_XxteaDecryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptionXXTEARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).XxteaDecryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Encryption.pb.EncryptionService/XxteaDecryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).XxteaDecryption(ctx, req.(*DecryptionXXTEARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_RsaEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptionRSARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).RsaEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Encryption.pb.EncryptionService/RsaEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).RsaEncryption(ctx, req.(*EncryptionRSARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_RsaDecryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptionRSARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).RsaDecryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aphro.Encryption.pb.EncryptionService/RsaDecryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).RsaDecryption(ctx, req.(*DecryptionRSARequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EncryptionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Aphro.Encryption.pb.EncryptionService",
	HandlerType: (*EncryptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "base64Encode",
			Handler:    _EncryptionService_Base64Encode_Handler,
		},
		{
			MethodName: "base64Decode",
			Handler:    _EncryptionService_Base64Decode_Handler,
		},
		{
			MethodName: "xxteaEncryption",
			Handler:    _EncryptionService_XxteaEncryption_Handler,
		},
		{
			MethodName: "xxteaDecryption",
			Handler:    _EncryptionService_XxteaDecryption_Handler,
		},
		{
			MethodName: "rsaEncryption",
			Handler:    _EncryptionService_RsaEncryption_Handler,
		},
		{
			MethodName: "rsaDecryption",
			Handler:    _EncryptionService_RsaDecryption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "encryption.proto",
}

func init() { proto.RegisterFile("encryption.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe5, 0x20, 0x55, 0x30, 0x0a, 0x6a, 0x6b, 0xd2, 0xb4, 0xb2, 0xda, 0x08, 0x2d, 0x17,
	0x5a, 0x90, 0x2d, 0x25, 0x88, 0x43, 0x8b, 0x04, 0x41, 0x0d, 0xdc, 0x40, 0x72, 0x10, 0xca, 0xd5,
	0x89, 0x47, 0x21, 0x22, 0xf2, 0x9a, 0xb5, 0x03, 0xc9, 0x35, 0x47, 0xae, 0x5c, 0x79, 0x2b, 0x5e,
	0x81, 0x57, 0xe0, 0x8e, 0xb2, 0x76, 0xd8, 0xf1, 0xff, 0xe5, 0x96, 0x4c, 0xf6, 0x9b, 0xef, 0x37,
	0xbb, 0xf3, 0x29, 0x70, 0x84, 0xc1, 0x4c, 0x6c, 0xc2, 0x78, 0xc1, 0x03, 0x3b, 0x14, 0x3c, 0xe6,
	0xe6, 0x83, 0x61, 0xf8, 0x49, 0x70, 0x7b, 0x44, 0xea, 0x53, 0xeb, 0x7c, 0xce, 0xf9, 0x7c, 0x89,
	0x8e, 0x17, 0x2e, 0x1c, 0x2f, 0x08, 0x78, 0xec, 0xed, 0x7e, 0x89, 0x12, 0x09, 0x7b, 0x09, 0x17,
	0xea, 0xf8, 0x6b, 0x2f, 0xc2, 0xe7, 0xcf, 0x6e, 0x71, 0xc6, 0x7d, 0x74, 0xf1, 0xcb, 0x0a, 0xa3,
	0xd8, 0xec, 0x01, 0xf8, 0xb2, 0xe0, 0x8f, 0x63, 0x71, 0x66, 0x3c, 0x34, 0x1e, 0xdf, 0x73, 0x49,
	0x85, 0xbd, 0x80, 0x5e, 0x55, 0x83, 0x28, 0xe4, 0x41, 0x84, 0xa6, 0x05, 0x77, 0x85, 0xf7, 0xed,
	0xa3, 0xb7, 0x5c, 0xa1, 0xd4, 0xb7, 0xdd, 0x7f, 0xdf, 0xd9, 0x4d, 0xd1, 0x7e, 0x14, 0x50, 0xfb,
	0x3a, 0xf1, 0xab, 0xa2, 0xf5, 0x5e, 0x9c, 0x5a, 0xf7, 0x00, 0x30, 0xc8, 0xc3, 0xab, 0x0a, 0x7b,
	0x03, 0x5d, 0xd5, 0x61, 0x32, 0xf9, 0x30, 0x1a, 0xee, 0x7d, 0x8f, 0xe0, 0xce, 0x67, 0xdc, 0xa4,
	0x92, 0xdd, 0xc7, 0x0c, 0x49, 0x4b, 0x96, 0x15, 0xc9, 0x7b, 0x38, 0x2d, 0xf4, 0x49, 0x11, 0x8a,
	0x8d, 0x18, 0xb4, 0xd3, 0x97, 0x4b, 0xb0, 0x5a, 0x72, 0xac, 0x4c, 0x8d, 0xbd, 0x83, 0xee, 0x2d,
	0x6a, 0x82, 0xe9, 0xf4, 0x7b, 0x0b, 0xa7, 0x85, 0x7e, 0x95, 0x80, 0x75, 0x93, 0xf6, 0xa1, 0xa3,
	0x26, 0x75, 0xc7, 0x43, 0x9d, 0x77, 0xba, 0x81, 0x93, 0x9c, 0x26, 0xb5, 0xce, 0x93, 0x1b, 0x25,
	0xe4, 0xd7, 0xd0, 0x51, 0xe4, 0xc4, 0x50, 0x47, 0x3b, 0x80, 0x93, 0x9c, 0xb6, 0x79, 0x25, 0xfb,
	0x7f, 0x0e, 0xe0, 0x58, 0xe1, 0x8e, 0x51, 0x7c, 0x5d, 0xcc, 0xd0, 0xfc, 0x69, 0x40, 0x7b, 0x4a,
	0x56, 0xcc, 0xec, 0xdb, 0x25, 0x61, 0xb3, 0x6b, 0x97, 0xd9, 0x1a, 0xfc, 0x97, 0x26, 0x61, 0x65,
	0x8f, 0xb6, 0xbf, 0x7e, 0xff, 0x68, 0x5d, 0xb0, 0x33, 0x47, 0xe5, 0xdd, 0xa1, 0x28, 0xd7, 0xc6,
	0x15, 0xc1, 0x4b, 0xc2, 0xa7, 0x89, 0x97, 0x89, 0xba, 0x26, 0x5e, 0x36, 0xdd, 0x75, 0x78, 0xc9,
	0xc9, 0x1d, 0xde, 0x77, 0x03, 0x0e, 0xd7, 0xeb, 0x18, 0x3d, 0xd5, 0xcc, 0x7c, 0xd2, 0xe0, 0x46,
	0xb7, 0xde, 0x7a, 0xaa, 0x77, 0x38, 0x65, 0x3a, 0x97, 0x4c, 0x5d, 0x76, 0x4c, 0x99, 0xa4, 0x7f,
	0x06, 0x46, 0xed, 0x46, 0x05, 0x4c, 0x79, 0x04, 0x2b, 0x60, 0x2a, 0xf2, 0x45, 0x60, 0x7c, 0x2c,
	0xc2, 0x6c, 0x0d, 0xb8, 0x2f, 0x22, 0x7a, 0x2f, 0x97, 0x0d, 0xa3, 0xaa, 0x0c, 0x58, 0x57, 0x3a,
	0x47, 0x53, 0x0c, 0x4b, 0x62, 0x74, 0xd8, 0x21, 0xbd, 0x13, 0x11, 0x51, 0x08, 0x72, 0x1f, 0x97,
	0x0d, 0x23, 0x36, 0x42, 0x94, 0xe6, 0x8e, 0x40, 0x90, 0xbb, 0x48, 0x20, 0xa6, 0x07, 0xf2, 0x0f,
	0x69, 0xf0, 0x37, 0x00, 0x00, 0xff, 0xff, 0xce, 0xf3, 0x66, 0x07, 0xd7, 0x06, 0x00, 0x00,
}
